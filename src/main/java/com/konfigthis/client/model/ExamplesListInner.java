/*
 * Oxford Dictionaries
 * Oxford Dictionaries, part of the Oxford Language Division, is a leading authority on the English language. It offers a wide range of language resources, including dictionaries, thesauruses, grammar guides, and language learning tools. Oxford Dictionaries provides accurate and up-to-date definitions, word origins, and usage examples to support language comprehension and communication.
 *
 * The version of the OpenAPI document: 1.11.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.CategorizedTextListInner;
import com.konfigthis.client.model.TranslationsListInner;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ExamplesListInner
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ExamplesListInner {
  public static final String SERIALIZED_NAME_DEFINITIONS = "definitions";
  @SerializedName(SERIALIZED_NAME_DEFINITIONS)
  private List<String> definitions = null;

  public static final String SERIALIZED_NAME_DOMAINS = "domains";
  @SerializedName(SERIALIZED_NAME_DOMAINS)
  private List<String> domains = null;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private List<CategorizedTextListInner> notes = null;

  public static final String SERIALIZED_NAME_REGIONS = "regions";
  @SerializedName(SERIALIZED_NAME_REGIONS)
  private List<String> regions = null;

  public static final String SERIALIZED_NAME_REGISTERS = "registers";
  @SerializedName(SERIALIZED_NAME_REGISTERS)
  private List<String> registers = null;

  public static final String SERIALIZED_NAME_SENSE_IDS = "senseIds";
  @SerializedName(SERIALIZED_NAME_SENSE_IDS)
  private List<String> senseIds = null;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public static final String SERIALIZED_NAME_TRANSLATIONS = "translations";
  @SerializedName(SERIALIZED_NAME_TRANSLATIONS)
  private List<TranslationsListInner> translations = null;

  public ExamplesListInner() {
  }

  public ExamplesListInner definitions(List<String> definitions) {
    
    
    
    
    this.definitions = definitions;
    return this;
  }

  public ExamplesListInner addDefinitionsItem(String definitionsItem) {
    if (this.definitions == null) {
      this.definitions = new ArrayList<>();
    }
    this.definitions.add(definitionsItem);
    return this;
  }

   /**
   * Get definitions
   * @return definitions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getDefinitions() {
    return definitions;
  }


  public void setDefinitions(List<String> definitions) {
    
    
    
    this.definitions = definitions;
  }


  public ExamplesListInner domains(List<String> domains) {
    
    
    
    
    this.domains = domains;
    return this;
  }

  public ExamplesListInner addDomainsItem(String domainsItem) {
    if (this.domains == null) {
      this.domains = new ArrayList<>();
    }
    this.domains.add(domainsItem);
    return this;
  }

   /**
   * Get domains
   * @return domains
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getDomains() {
    return domains;
  }


  public void setDomains(List<String> domains) {
    
    
    
    this.domains = domains;
  }


  public ExamplesListInner notes(List<CategorizedTextListInner> notes) {
    
    
    
    
    this.notes = notes;
    return this;
  }

  public ExamplesListInner addNotesItem(CategorizedTextListInner notesItem) {
    if (this.notes == null) {
      this.notes = new ArrayList<>();
    }
    this.notes.add(notesItem);
    return this;
  }

   /**
   * various types of notes that appear
   * @return notes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "various types of notes that appear")

  public List<CategorizedTextListInner> getNotes() {
    return notes;
  }


  public void setNotes(List<CategorizedTextListInner> notes) {
    
    
    
    this.notes = notes;
  }


  public ExamplesListInner regions(List<String> regions) {
    
    
    
    
    this.regions = regions;
    return this;
  }

  public ExamplesListInner addRegionsItem(String regionsItem) {
    if (this.regions == null) {
      this.regions = new ArrayList<>();
    }
    this.regions.add(regionsItem);
    return this;
  }

   /**
   * Get regions
   * @return regions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getRegions() {
    return regions;
  }


  public void setRegions(List<String> regions) {
    
    
    
    this.regions = regions;
  }


  public ExamplesListInner registers(List<String> registers) {
    
    
    
    
    this.registers = registers;
    return this;
  }

  public ExamplesListInner addRegistersItem(String registersItem) {
    if (this.registers == null) {
      this.registers = new ArrayList<>();
    }
    this.registers.add(registersItem);
    return this;
  }

   /**
   * Get registers
   * @return registers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getRegisters() {
    return registers;
  }


  public void setRegisters(List<String> registers) {
    
    
    
    this.registers = registers;
  }


  public ExamplesListInner senseIds(List<String> senseIds) {
    
    
    
    
    this.senseIds = senseIds;
    return this;
  }

  public ExamplesListInner addSenseIdsItem(String senseIdsItem) {
    if (this.senseIds == null) {
      this.senseIds = new ArrayList<>();
    }
    this.senseIds.add(senseIdsItem);
    return this;
  }

   /**
   * Get senseIds
   * @return senseIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getSenseIds() {
    return senseIds;
  }


  public void setSenseIds(List<String> senseIds) {
    
    
    
    this.senseIds = senseIds;
  }


  public ExamplesListInner text(String text) {
    
    
    
    
    this.text = text;
    return this;
  }

   /**
   * Get text
   * @return text
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getText() {
    return text;
  }


  public void setText(String text) {
    
    
    
    this.text = text;
  }


  public ExamplesListInner translations(List<TranslationsListInner> translations) {
    
    
    
    
    this.translations = translations;
    return this;
  }

  public ExamplesListInner addTranslationsItem(TranslationsListInner translationsItem) {
    if (this.translations == null) {
      this.translations = new ArrayList<>();
    }
    this.translations.add(translationsItem);
    return this;
  }

   /**
   * A list of written or spoken rendering of the meaning of a word or text in another language(s)
   * @return translations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of written or spoken rendering of the meaning of a word or text in another language(s)")

  public List<TranslationsListInner> getTranslations() {
    return translations;
  }


  public void setTranslations(List<TranslationsListInner> translations) {
    
    
    
    this.translations = translations;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ExamplesListInner instance itself
   */
  public ExamplesListInner putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExamplesListInner examplesListInner = (ExamplesListInner) o;
    return Objects.equals(this.definitions, examplesListInner.definitions) &&
        Objects.equals(this.domains, examplesListInner.domains) &&
        Objects.equals(this.notes, examplesListInner.notes) &&
        Objects.equals(this.regions, examplesListInner.regions) &&
        Objects.equals(this.registers, examplesListInner.registers) &&
        Objects.equals(this.senseIds, examplesListInner.senseIds) &&
        Objects.equals(this.text, examplesListInner.text) &&
        Objects.equals(this.translations, examplesListInner.translations)&&
        Objects.equals(this.additionalProperties, examplesListInner.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(definitions, domains, notes, regions, registers, senseIds, text, translations, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExamplesListInner {\n");
    sb.append("    definitions: ").append(toIndentedString(definitions)).append("\n");
    sb.append("    domains: ").append(toIndentedString(domains)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    regions: ").append(toIndentedString(regions)).append("\n");
    sb.append("    registers: ").append(toIndentedString(registers)).append("\n");
    sb.append("    senseIds: ").append(toIndentedString(senseIds)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    translations: ").append(toIndentedString(translations)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("definitions");
    openapiFields.add("domains");
    openapiFields.add("notes");
    openapiFields.add("regions");
    openapiFields.add("registers");
    openapiFields.add("senseIds");
    openapiFields.add("text");
    openapiFields.add("translations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("text");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ExamplesListInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ExamplesListInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExamplesListInner is not found in the empty JSON string", ExamplesListInner.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ExamplesListInner.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("definitions") != null && !jsonObj.get("definitions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `definitions` to be an array in the JSON string but got `%s`", jsonObj.get("definitions").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("domains") != null && !jsonObj.get("domains").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `domains` to be an array in the JSON string but got `%s`", jsonObj.get("domains").toString()));
      }
      if (jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) {
        JsonArray jsonArraynotes = jsonObj.getAsJsonArray("notes");
        if (jsonArraynotes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("notes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `notes` to be an array in the JSON string but got `%s`", jsonObj.get("notes").toString()));
          }

          // validate the optional field `notes` (array)
          for (int i = 0; i < jsonArraynotes.size(); i++) {
            CategorizedTextListInner.validateJsonObject(jsonArraynotes.get(i).getAsJsonObject());
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("regions") != null && !jsonObj.get("regions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `regions` to be an array in the JSON string but got `%s`", jsonObj.get("regions").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("registers") != null && !jsonObj.get("registers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `registers` to be an array in the JSON string but got `%s`", jsonObj.get("registers").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("senseIds") != null && !jsonObj.get("senseIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `senseIds` to be an array in the JSON string but got `%s`", jsonObj.get("senseIds").toString()));
      }
      if (!jsonObj.get("text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
      if (jsonObj.get("translations") != null && !jsonObj.get("translations").isJsonNull()) {
        JsonArray jsonArraytranslations = jsonObj.getAsJsonArray("translations");
        if (jsonArraytranslations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("translations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `translations` to be an array in the JSON string but got `%s`", jsonObj.get("translations").toString()));
          }

          // validate the optional field `translations` (array)
          for (int i = 0; i < jsonArraytranslations.size(); i++) {
            TranslationsListInner.validateJsonObject(jsonArraytranslations.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExamplesListInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExamplesListInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExamplesListInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExamplesListInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ExamplesListInner>() {
           @Override
           public void write(JsonWriter out, ExamplesListInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ExamplesListInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ExamplesListInner instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ExamplesListInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ExamplesListInner
  * @throws IOException if the JSON string is invalid with respect to ExamplesListInner
  */
  public static ExamplesListInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExamplesListInner.class);
  }

 /**
  * Convert an instance of ExamplesListInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

