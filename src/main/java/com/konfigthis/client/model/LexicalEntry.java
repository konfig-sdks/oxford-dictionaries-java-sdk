/*
 * Oxford Dictionaries
 * Oxford Dictionaries, part of the Oxford Language Division, is a leading authority on the English language. It offers a wide range of language resources, including dictionaries, thesauruses, grammar guides, and language learning tools. Oxford Dictionaries provides accurate and up-to-date definitions, word origins, and usage examples to support language comprehension and communication.
 *
 * The version of the OpenAPI document: 1.11.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ArrayOfRelatedEntriesInner;
import com.konfigthis.client.model.CategorizedTextListInner;
import com.konfigthis.client.model.Entry;
import com.konfigthis.client.model.GrammaticalFeaturesListInner;
import com.konfigthis.client.model.PronunciationsListInner;
import com.konfigthis.client.model.VariantFormsListInner;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Description of an entry for a particular part of speech
 */
@ApiModel(description = "Description of an entry for a particular part of speech")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class LexicalEntry {
  public static final String SERIALIZED_NAME_DERIVATIVE_OF = "derivativeOf";
  @SerializedName(SERIALIZED_NAME_DERIVATIVE_OF)
  private List<ArrayOfRelatedEntriesInner> derivativeOf = null;

  public static final String SERIALIZED_NAME_DERIVATIVES = "derivatives";
  @SerializedName(SERIALIZED_NAME_DERIVATIVES)
  private List<ArrayOfRelatedEntriesInner> derivatives = null;

  public static final String SERIALIZED_NAME_ENTRIES = "entries";
  @SerializedName(SERIALIZED_NAME_ENTRIES)
  private List<Entry> entries = null;

  public static final String SERIALIZED_NAME_GRAMMATICAL_FEATURES = "grammaticalFeatures";
  @SerializedName(SERIALIZED_NAME_GRAMMATICAL_FEATURES)
  private List<GrammaticalFeaturesListInner> grammaticalFeatures = null;

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private String language;

  public static final String SERIALIZED_NAME_LEXICAL_CATEGORY = "lexicalCategory";
  @SerializedName(SERIALIZED_NAME_LEXICAL_CATEGORY)
  private String lexicalCategory;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private List<CategorizedTextListInner> notes = null;

  public static final String SERIALIZED_NAME_PRONUNCIATIONS = "pronunciations";
  @SerializedName(SERIALIZED_NAME_PRONUNCIATIONS)
  private List<PronunciationsListInner> pronunciations = null;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public static final String SERIALIZED_NAME_VARIANT_FORMS = "variantForms";
  @SerializedName(SERIALIZED_NAME_VARIANT_FORMS)
  private List<VariantFormsListInner> variantForms = null;

  public LexicalEntry() {
  }

  public LexicalEntry derivativeOf(List<ArrayOfRelatedEntriesInner> derivativeOf) {
    
    
    
    
    this.derivativeOf = derivativeOf;
    return this;
  }

  public LexicalEntry addDerivativeOfItem(ArrayOfRelatedEntriesInner derivativeOfItem) {
    if (this.derivativeOf == null) {
      this.derivativeOf = new ArrayList<>();
    }
    this.derivativeOf.add(derivativeOfItem);
    return this;
  }

   /**
   * A list of written or spoken words
   * @return derivativeOf
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of written or spoken words")

  public List<ArrayOfRelatedEntriesInner> getDerivativeOf() {
    return derivativeOf;
  }


  public void setDerivativeOf(List<ArrayOfRelatedEntriesInner> derivativeOf) {
    
    
    
    this.derivativeOf = derivativeOf;
  }


  public LexicalEntry derivatives(List<ArrayOfRelatedEntriesInner> derivatives) {
    
    
    
    
    this.derivatives = derivatives;
    return this;
  }

  public LexicalEntry addDerivativesItem(ArrayOfRelatedEntriesInner derivativesItem) {
    if (this.derivatives == null) {
      this.derivatives = new ArrayList<>();
    }
    this.derivatives.add(derivativesItem);
    return this;
  }

   /**
   * A list of written or spoken words
   * @return derivatives
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of written or spoken words")

  public List<ArrayOfRelatedEntriesInner> getDerivatives() {
    return derivatives;
  }


  public void setDerivatives(List<ArrayOfRelatedEntriesInner> derivatives) {
    
    
    
    this.derivatives = derivatives;
  }


  public LexicalEntry entries(List<Entry> entries) {
    
    
    
    
    this.entries = entries;
    return this;
  }

  public LexicalEntry addEntriesItem(Entry entriesItem) {
    if (this.entries == null) {
      this.entries = new ArrayList<>();
    }
    this.entries.add(entriesItem);
    return this;
  }

   /**
   * Get entries
   * @return entries
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Entry> getEntries() {
    return entries;
  }


  public void setEntries(List<Entry> entries) {
    
    
    
    this.entries = entries;
  }


  public LexicalEntry grammaticalFeatures(List<GrammaticalFeaturesListInner> grammaticalFeatures) {
    
    
    
    
    this.grammaticalFeatures = grammaticalFeatures;
    return this;
  }

  public LexicalEntry addGrammaticalFeaturesItem(GrammaticalFeaturesListInner grammaticalFeaturesItem) {
    if (this.grammaticalFeatures == null) {
      this.grammaticalFeatures = new ArrayList<>();
    }
    this.grammaticalFeatures.add(grammaticalFeaturesItem);
    return this;
  }

   /**
   * The different forms are correlated with meanings or functions which we text as &#39;features&#39;
   * @return grammaticalFeatures
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The different forms are correlated with meanings or functions which we text as 'features'")

  public List<GrammaticalFeaturesListInner> getGrammaticalFeatures() {
    return grammaticalFeatures;
  }


  public void setGrammaticalFeatures(List<GrammaticalFeaturesListInner> grammaticalFeatures) {
    
    
    
    this.grammaticalFeatures = grammaticalFeatures;
  }


  public LexicalEntry language(String language) {
    
    
    
    
    this.language = language;
    return this;
  }

   /**
   * IANA language code
   * @return language
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "IANA language code")

  public String getLanguage() {
    return language;
  }


  public void setLanguage(String language) {
    
    
    
    this.language = language;
  }


  public LexicalEntry lexicalCategory(String lexicalCategory) {
    
    
    
    
    this.lexicalCategory = lexicalCategory;
    return this;
  }

   /**
   * A linguistic category of words (or more precisely lexical items), generally defined by the syntactic or morphological behaviour of the lexical item in question, such as noun or verb
   * @return lexicalCategory
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "A linguistic category of words (or more precisely lexical items), generally defined by the syntactic or morphological behaviour of the lexical item in question, such as noun or verb")

  public String getLexicalCategory() {
    return lexicalCategory;
  }


  public void setLexicalCategory(String lexicalCategory) {
    
    
    
    this.lexicalCategory = lexicalCategory;
  }


  public LexicalEntry notes(List<CategorizedTextListInner> notes) {
    
    
    
    
    this.notes = notes;
    return this;
  }

  public LexicalEntry addNotesItem(CategorizedTextListInner notesItem) {
    if (this.notes == null) {
      this.notes = new ArrayList<>();
    }
    this.notes.add(notesItem);
    return this;
  }

   /**
   * various types of notes that appear
   * @return notes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "various types of notes that appear")

  public List<CategorizedTextListInner> getNotes() {
    return notes;
  }


  public void setNotes(List<CategorizedTextListInner> notes) {
    
    
    
    this.notes = notes;
  }


  public LexicalEntry pronunciations(List<PronunciationsListInner> pronunciations) {
    
    
    
    
    this.pronunciations = pronunciations;
    return this;
  }

  public LexicalEntry addPronunciationsItem(PronunciationsListInner pronunciationsItem) {
    if (this.pronunciations == null) {
      this.pronunciations = new ArrayList<>();
    }
    this.pronunciations.add(pronunciationsItem);
    return this;
  }

   /**
   * A list of possible pronunciations of a word
   * @return pronunciations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of possible pronunciations of a word")

  public List<PronunciationsListInner> getPronunciations() {
    return pronunciations;
  }


  public void setPronunciations(List<PronunciationsListInner> pronunciations) {
    
    
    
    this.pronunciations = pronunciations;
  }


  public LexicalEntry text(String text) {
    
    
    
    
    this.text = text;
    return this;
  }

   /**
   * A given written or spoken realisation of a an entry.
   * @return text
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "A given written or spoken realisation of a an entry.")

  public String getText() {
    return text;
  }


  public void setText(String text) {
    
    
    
    this.text = text;
  }


  public LexicalEntry variantForms(List<VariantFormsListInner> variantForms) {
    
    
    
    
    this.variantForms = variantForms;
    return this;
  }

  public LexicalEntry addVariantFormsItem(VariantFormsListInner variantFormsItem) {
    if (this.variantForms == null) {
      this.variantForms = new ArrayList<>();
    }
    this.variantForms.add(variantFormsItem);
    return this;
  }

   /**
   * Various words that are used interchangeably depending on the context, e.g &#39;aluminium&#39; and &#39;aluminum&#39;
   * @return variantForms
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Various words that are used interchangeably depending on the context, e.g 'aluminium' and 'aluminum'")

  public List<VariantFormsListInner> getVariantForms() {
    return variantForms;
  }


  public void setVariantForms(List<VariantFormsListInner> variantForms) {
    
    
    
    this.variantForms = variantForms;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the LexicalEntry instance itself
   */
  public LexicalEntry putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LexicalEntry lexicalEntry = (LexicalEntry) o;
    return Objects.equals(this.derivativeOf, lexicalEntry.derivativeOf) &&
        Objects.equals(this.derivatives, lexicalEntry.derivatives) &&
        Objects.equals(this.entries, lexicalEntry.entries) &&
        Objects.equals(this.grammaticalFeatures, lexicalEntry.grammaticalFeatures) &&
        Objects.equals(this.language, lexicalEntry.language) &&
        Objects.equals(this.lexicalCategory, lexicalEntry.lexicalCategory) &&
        Objects.equals(this.notes, lexicalEntry.notes) &&
        Objects.equals(this.pronunciations, lexicalEntry.pronunciations) &&
        Objects.equals(this.text, lexicalEntry.text) &&
        Objects.equals(this.variantForms, lexicalEntry.variantForms)&&
        Objects.equals(this.additionalProperties, lexicalEntry.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(derivativeOf, derivatives, entries, grammaticalFeatures, language, lexicalCategory, notes, pronunciations, text, variantForms, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LexicalEntry {\n");
    sb.append("    derivativeOf: ").append(toIndentedString(derivativeOf)).append("\n");
    sb.append("    derivatives: ").append(toIndentedString(derivatives)).append("\n");
    sb.append("    entries: ").append(toIndentedString(entries)).append("\n");
    sb.append("    grammaticalFeatures: ").append(toIndentedString(grammaticalFeatures)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    lexicalCategory: ").append(toIndentedString(lexicalCategory)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    pronunciations: ").append(toIndentedString(pronunciations)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    variantForms: ").append(toIndentedString(variantForms)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("derivativeOf");
    openapiFields.add("derivatives");
    openapiFields.add("entries");
    openapiFields.add("grammaticalFeatures");
    openapiFields.add("language");
    openapiFields.add("lexicalCategory");
    openapiFields.add("notes");
    openapiFields.add("pronunciations");
    openapiFields.add("text");
    openapiFields.add("variantForms");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("language");
    openapiRequiredFields.add("lexicalCategory");
    openapiRequiredFields.add("text");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to LexicalEntry
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!LexicalEntry.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LexicalEntry is not found in the empty JSON string", LexicalEntry.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LexicalEntry.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("derivativeOf") != null && !jsonObj.get("derivativeOf").isJsonNull()) {
        JsonArray jsonArrayderivativeOf = jsonObj.getAsJsonArray("derivativeOf");
        if (jsonArrayderivativeOf != null) {
          // ensure the json data is an array
          if (!jsonObj.get("derivativeOf").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `derivativeOf` to be an array in the JSON string but got `%s`", jsonObj.get("derivativeOf").toString()));
          }

          // validate the optional field `derivativeOf` (array)
          for (int i = 0; i < jsonArrayderivativeOf.size(); i++) {
            ArrayOfRelatedEntriesInner.validateJsonObject(jsonArrayderivativeOf.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("derivatives") != null && !jsonObj.get("derivatives").isJsonNull()) {
        JsonArray jsonArrayderivatives = jsonObj.getAsJsonArray("derivatives");
        if (jsonArrayderivatives != null) {
          // ensure the json data is an array
          if (!jsonObj.get("derivatives").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `derivatives` to be an array in the JSON string but got `%s`", jsonObj.get("derivatives").toString()));
          }

          // validate the optional field `derivatives` (array)
          for (int i = 0; i < jsonArrayderivatives.size(); i++) {
            ArrayOfRelatedEntriesInner.validateJsonObject(jsonArrayderivatives.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("entries") != null && !jsonObj.get("entries").isJsonNull()) {
        JsonArray jsonArrayentries = jsonObj.getAsJsonArray("entries");
        if (jsonArrayentries != null) {
          // ensure the json data is an array
          if (!jsonObj.get("entries").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `entries` to be an array in the JSON string but got `%s`", jsonObj.get("entries").toString()));
          }

          // validate the optional field `entries` (array)
          for (int i = 0; i < jsonArrayentries.size(); i++) {
            Entry.validateJsonObject(jsonArrayentries.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("grammaticalFeatures") != null && !jsonObj.get("grammaticalFeatures").isJsonNull()) {
        JsonArray jsonArraygrammaticalFeatures = jsonObj.getAsJsonArray("grammaticalFeatures");
        if (jsonArraygrammaticalFeatures != null) {
          // ensure the json data is an array
          if (!jsonObj.get("grammaticalFeatures").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `grammaticalFeatures` to be an array in the JSON string but got `%s`", jsonObj.get("grammaticalFeatures").toString()));
          }

          // validate the optional field `grammaticalFeatures` (array)
          for (int i = 0; i < jsonArraygrammaticalFeatures.size(); i++) {
            GrammaticalFeaturesListInner.validateJsonObject(jsonArraygrammaticalFeatures.get(i).getAsJsonObject());
          };
        }
      }
      if (!jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
      if (!jsonObj.get("lexicalCategory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lexicalCategory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lexicalCategory").toString()));
      }
      if (jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) {
        JsonArray jsonArraynotes = jsonObj.getAsJsonArray("notes");
        if (jsonArraynotes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("notes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `notes` to be an array in the JSON string but got `%s`", jsonObj.get("notes").toString()));
          }

          // validate the optional field `notes` (array)
          for (int i = 0; i < jsonArraynotes.size(); i++) {
            CategorizedTextListInner.validateJsonObject(jsonArraynotes.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("pronunciations") != null && !jsonObj.get("pronunciations").isJsonNull()) {
        JsonArray jsonArraypronunciations = jsonObj.getAsJsonArray("pronunciations");
        if (jsonArraypronunciations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("pronunciations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `pronunciations` to be an array in the JSON string but got `%s`", jsonObj.get("pronunciations").toString()));
          }

          // validate the optional field `pronunciations` (array)
          for (int i = 0; i < jsonArraypronunciations.size(); i++) {
            PronunciationsListInner.validateJsonObject(jsonArraypronunciations.get(i).getAsJsonObject());
          };
        }
      }
      if (!jsonObj.get("text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
      if (jsonObj.get("variantForms") != null && !jsonObj.get("variantForms").isJsonNull()) {
        JsonArray jsonArrayvariantForms = jsonObj.getAsJsonArray("variantForms");
        if (jsonArrayvariantForms != null) {
          // ensure the json data is an array
          if (!jsonObj.get("variantForms").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `variantForms` to be an array in the JSON string but got `%s`", jsonObj.get("variantForms").toString()));
          }

          // validate the optional field `variantForms` (array)
          for (int i = 0; i < jsonArrayvariantForms.size(); i++) {
            VariantFormsListInner.validateJsonObject(jsonArrayvariantForms.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LexicalEntry.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LexicalEntry' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LexicalEntry> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LexicalEntry.class));

       return (TypeAdapter<T>) new TypeAdapter<LexicalEntry>() {
           @Override
           public void write(JsonWriter out, LexicalEntry value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public LexicalEntry read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             LexicalEntry instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LexicalEntry given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LexicalEntry
  * @throws IOException if the JSON string is invalid with respect to LexicalEntry
  */
  public static LexicalEntry fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LexicalEntry.class);
  }

 /**
  * Convert an instance of LexicalEntry to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

