/*
 * Oxford Dictionaries
 * Oxford Dictionaries, part of the Oxford Language Division, is a leading authority on the English language. It offers a wide range of language resources, including dictionaries, thesauruses, grammar guides, and language learning tools. Oxford Dictionaries provides accurate and up-to-date definitions, word origins, and usage examples to support language comprehension and communication.
 *
 * The version of the OpenAPI document: 1.11.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.CategorizedTextListInner;
import com.konfigthis.client.model.CrossReferencesListInner;
import com.konfigthis.client.model.ExamplesListInner;
import com.konfigthis.client.model.PronunciationsListInner;
import com.konfigthis.client.model.ThesaurusLink;
import com.konfigthis.client.model.TranslationsListInner;
import com.konfigthis.client.model.VariantFormsListInner;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * A lexical sense represents the lexical meaning of a lexical entry when interpreted as referring to the corresponding ontology element
 */
@ApiModel(description = "A lexical sense represents the lexical meaning of a lexical entry when interpreted as referring to the corresponding ontology element")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Sense {
  public static final String SERIALIZED_NAME_CROSS_REFERENCE_MARKERS = "crossReferenceMarkers";
  @SerializedName(SERIALIZED_NAME_CROSS_REFERENCE_MARKERS)
  private List<String> crossReferenceMarkers = null;

  public static final String SERIALIZED_NAME_CROSS_REFERENCES = "crossReferences";
  @SerializedName(SERIALIZED_NAME_CROSS_REFERENCES)
  private List<CrossReferencesListInner> crossReferences = null;

  public static final String SERIALIZED_NAME_DEFINITIONS = "definitions";
  @SerializedName(SERIALIZED_NAME_DEFINITIONS)
  private List<String> definitions = null;

  public static final String SERIALIZED_NAME_DOMAINS = "domains";
  @SerializedName(SERIALIZED_NAME_DOMAINS)
  private List<String> domains = null;

  public static final String SERIALIZED_NAME_EXAMPLES = "examples";
  @SerializedName(SERIALIZED_NAME_EXAMPLES)
  private List<ExamplesListInner> examples = null;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private List<CategorizedTextListInner> notes = null;

  public static final String SERIALIZED_NAME_PRONUNCIATIONS = "pronunciations";
  @SerializedName(SERIALIZED_NAME_PRONUNCIATIONS)
  private List<PronunciationsListInner> pronunciations = null;

  public static final String SERIALIZED_NAME_REGIONS = "regions";
  @SerializedName(SERIALIZED_NAME_REGIONS)
  private List<String> regions = null;

  public static final String SERIALIZED_NAME_REGISTERS = "registers";
  @SerializedName(SERIALIZED_NAME_REGISTERS)
  private List<String> registers = null;

  public static final String SERIALIZED_NAME_SHORT_DEFINITIONS = "short_definitions";
  @SerializedName(SERIALIZED_NAME_SHORT_DEFINITIONS)
  private List<String> shortDefinitions = null;

  public static final String SERIALIZED_NAME_SUBSENSES = "subsenses";
  @SerializedName(SERIALIZED_NAME_SUBSENSES)
  private List<Sense> subsenses = null;

  public static final String SERIALIZED_NAME_THESAURUS_LINKS = "thesaurusLinks";
  @SerializedName(SERIALIZED_NAME_THESAURUS_LINKS)
  private List<ThesaurusLink> thesaurusLinks = null;

  public static final String SERIALIZED_NAME_TRANSLATIONS = "translations";
  @SerializedName(SERIALIZED_NAME_TRANSLATIONS)
  private List<TranslationsListInner> translations = null;

  public static final String SERIALIZED_NAME_VARIANT_FORMS = "variantForms";
  @SerializedName(SERIALIZED_NAME_VARIANT_FORMS)
  private List<VariantFormsListInner> variantForms = null;

  public Sense() {
  }

  public Sense crossReferenceMarkers(List<String> crossReferenceMarkers) {
    
    
    
    
    this.crossReferenceMarkers = crossReferenceMarkers;
    return this;
  }

  public Sense addCrossReferenceMarkersItem(String crossReferenceMarkersItem) {
    if (this.crossReferenceMarkers == null) {
      this.crossReferenceMarkers = new ArrayList<>();
    }
    this.crossReferenceMarkers.add(crossReferenceMarkersItem);
    return this;
  }

   /**
   * Get crossReferenceMarkers
   * @return crossReferenceMarkers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getCrossReferenceMarkers() {
    return crossReferenceMarkers;
  }


  public void setCrossReferenceMarkers(List<String> crossReferenceMarkers) {
    
    
    
    this.crossReferenceMarkers = crossReferenceMarkers;
  }


  public Sense crossReferences(List<CrossReferencesListInner> crossReferences) {
    
    
    
    
    this.crossReferences = crossReferences;
    return this;
  }

  public Sense addCrossReferencesItem(CrossReferencesListInner crossReferencesItem) {
    if (this.crossReferences == null) {
      this.crossReferences = new ArrayList<>();
    }
    this.crossReferences.add(crossReferencesItem);
    return this;
  }

   /**
   * A reference to another word that is closely related, might provide additional information about the subject, has a variant spelling or is an abbreviated form of it.
   * @return crossReferences
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A reference to another word that is closely related, might provide additional information about the subject, has a variant spelling or is an abbreviated form of it.")

  public List<CrossReferencesListInner> getCrossReferences() {
    return crossReferences;
  }


  public void setCrossReferences(List<CrossReferencesListInner> crossReferences) {
    
    
    
    this.crossReferences = crossReferences;
  }


  public Sense definitions(List<String> definitions) {
    
    
    
    
    this.definitions = definitions;
    return this;
  }

  public Sense addDefinitionsItem(String definitionsItem) {
    if (this.definitions == null) {
      this.definitions = new ArrayList<>();
    }
    this.definitions.add(definitionsItem);
    return this;
  }

   /**
   * Get definitions
   * @return definitions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getDefinitions() {
    return definitions;
  }


  public void setDefinitions(List<String> definitions) {
    
    
    
    this.definitions = definitions;
  }


  public Sense domains(List<String> domains) {
    
    
    
    
    this.domains = domains;
    return this;
  }

  public Sense addDomainsItem(String domainsItem) {
    if (this.domains == null) {
      this.domains = new ArrayList<>();
    }
    this.domains.add(domainsItem);
    return this;
  }

   /**
   * Get domains
   * @return domains
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getDomains() {
    return domains;
  }


  public void setDomains(List<String> domains) {
    
    
    
    this.domains = domains;
  }


  public Sense examples(List<ExamplesListInner> examples) {
    
    
    
    
    this.examples = examples;
    return this;
  }

  public Sense addExamplesItem(ExamplesListInner examplesItem) {
    if (this.examples == null) {
      this.examples = new ArrayList<>();
    }
    this.examples.add(examplesItem);
    return this;
  }

   /**
   * A list of written or spoken rendering of examples of use of a word or text
   * @return examples
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of written or spoken rendering of examples of use of a word or text")

  public List<ExamplesListInner> getExamples() {
    return examples;
  }


  public void setExamples(List<ExamplesListInner> examples) {
    
    
    
    this.examples = examples;
  }


  public Sense id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * The id of the sense that is required for the delete procedure
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The id of the sense that is required for the delete procedure")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public Sense notes(List<CategorizedTextListInner> notes) {
    
    
    
    
    this.notes = notes;
    return this;
  }

  public Sense addNotesItem(CategorizedTextListInner notesItem) {
    if (this.notes == null) {
      this.notes = new ArrayList<>();
    }
    this.notes.add(notesItem);
    return this;
  }

   /**
   * various types of notes that appear
   * @return notes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "various types of notes that appear")

  public List<CategorizedTextListInner> getNotes() {
    return notes;
  }


  public void setNotes(List<CategorizedTextListInner> notes) {
    
    
    
    this.notes = notes;
  }


  public Sense pronunciations(List<PronunciationsListInner> pronunciations) {
    
    
    
    
    this.pronunciations = pronunciations;
    return this;
  }

  public Sense addPronunciationsItem(PronunciationsListInner pronunciationsItem) {
    if (this.pronunciations == null) {
      this.pronunciations = new ArrayList<>();
    }
    this.pronunciations.add(pronunciationsItem);
    return this;
  }

   /**
   * A list of possible pronunciations of a word
   * @return pronunciations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of possible pronunciations of a word")

  public List<PronunciationsListInner> getPronunciations() {
    return pronunciations;
  }


  public void setPronunciations(List<PronunciationsListInner> pronunciations) {
    
    
    
    this.pronunciations = pronunciations;
  }


  public Sense regions(List<String> regions) {
    
    
    
    
    this.regions = regions;
    return this;
  }

  public Sense addRegionsItem(String regionsItem) {
    if (this.regions == null) {
      this.regions = new ArrayList<>();
    }
    this.regions.add(regionsItem);
    return this;
  }

   /**
   * Get regions
   * @return regions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getRegions() {
    return regions;
  }


  public void setRegions(List<String> regions) {
    
    
    
    this.regions = regions;
  }


  public Sense registers(List<String> registers) {
    
    
    
    
    this.registers = registers;
    return this;
  }

  public Sense addRegistersItem(String registersItem) {
    if (this.registers == null) {
      this.registers = new ArrayList<>();
    }
    this.registers.add(registersItem);
    return this;
  }

   /**
   * Get registers
   * @return registers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getRegisters() {
    return registers;
  }


  public void setRegisters(List<String> registers) {
    
    
    
    this.registers = registers;
  }


  public Sense shortDefinitions(List<String> shortDefinitions) {
    
    
    
    
    this.shortDefinitions = shortDefinitions;
    return this;
  }

  public Sense addShortDefinitionsItem(String shortDefinitionsItem) {
    if (this.shortDefinitions == null) {
      this.shortDefinitions = new ArrayList<>();
    }
    this.shortDefinitions.add(shortDefinitionsItem);
    return this;
  }

   /**
   * Get shortDefinitions
   * @return shortDefinitions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getShortDefinitions() {
    return shortDefinitions;
  }


  public void setShortDefinitions(List<String> shortDefinitions) {
    
    
    
    this.shortDefinitions = shortDefinitions;
  }


  public Sense subsenses(List<Sense> subsenses) {
    
    
    
    
    this.subsenses = subsenses;
    return this;
  }

  public Sense addSubsensesItem(Sense subsensesItem) {
    if (this.subsenses == null) {
      this.subsenses = new ArrayList<>();
    }
    this.subsenses.add(subsensesItem);
    return this;
  }

   /**
   * Ordered list of subsenses of a sense
   * @return subsenses
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Ordered list of subsenses of a sense")

  public List<Sense> getSubsenses() {
    return subsenses;
  }


  public void setSubsenses(List<Sense> subsenses) {
    
    
    
    this.subsenses = subsenses;
  }


  public Sense thesaurusLinks(List<ThesaurusLink> thesaurusLinks) {
    
    
    
    
    this.thesaurusLinks = thesaurusLinks;
    return this;
  }

  public Sense addThesaurusLinksItem(ThesaurusLink thesaurusLinksItem) {
    if (this.thesaurusLinks == null) {
      this.thesaurusLinks = new ArrayList<>();
    }
    this.thesaurusLinks.add(thesaurusLinksItem);
    return this;
  }

   /**
   * Ordered list of links to the Thesaurus Dictionary
   * @return thesaurusLinks
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Ordered list of links to the Thesaurus Dictionary")

  public List<ThesaurusLink> getThesaurusLinks() {
    return thesaurusLinks;
  }


  public void setThesaurusLinks(List<ThesaurusLink> thesaurusLinks) {
    
    
    
    this.thesaurusLinks = thesaurusLinks;
  }


  public Sense translations(List<TranslationsListInner> translations) {
    
    
    
    
    this.translations = translations;
    return this;
  }

  public Sense addTranslationsItem(TranslationsListInner translationsItem) {
    if (this.translations == null) {
      this.translations = new ArrayList<>();
    }
    this.translations.add(translationsItem);
    return this;
  }

   /**
   * A list of written or spoken rendering of the meaning of a word or text in another language(s)
   * @return translations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of written or spoken rendering of the meaning of a word or text in another language(s)")

  public List<TranslationsListInner> getTranslations() {
    return translations;
  }


  public void setTranslations(List<TranslationsListInner> translations) {
    
    
    
    this.translations = translations;
  }


  public Sense variantForms(List<VariantFormsListInner> variantForms) {
    
    
    
    
    this.variantForms = variantForms;
    return this;
  }

  public Sense addVariantFormsItem(VariantFormsListInner variantFormsItem) {
    if (this.variantForms == null) {
      this.variantForms = new ArrayList<>();
    }
    this.variantForms.add(variantFormsItem);
    return this;
  }

   /**
   * Various words that are used interchangeably depending on the context, e.g &#39;aluminium&#39; and &#39;aluminum&#39;
   * @return variantForms
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Various words that are used interchangeably depending on the context, e.g 'aluminium' and 'aluminum'")

  public List<VariantFormsListInner> getVariantForms() {
    return variantForms;
  }


  public void setVariantForms(List<VariantFormsListInner> variantForms) {
    
    
    
    this.variantForms = variantForms;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Sense instance itself
   */
  public Sense putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Sense sense = (Sense) o;
    return Objects.equals(this.crossReferenceMarkers, sense.crossReferenceMarkers) &&
        Objects.equals(this.crossReferences, sense.crossReferences) &&
        Objects.equals(this.definitions, sense.definitions) &&
        Objects.equals(this.domains, sense.domains) &&
        Objects.equals(this.examples, sense.examples) &&
        Objects.equals(this.id, sense.id) &&
        Objects.equals(this.notes, sense.notes) &&
        Objects.equals(this.pronunciations, sense.pronunciations) &&
        Objects.equals(this.regions, sense.regions) &&
        Objects.equals(this.registers, sense.registers) &&
        Objects.equals(this.shortDefinitions, sense.shortDefinitions) &&
        Objects.equals(this.subsenses, sense.subsenses) &&
        Objects.equals(this.thesaurusLinks, sense.thesaurusLinks) &&
        Objects.equals(this.translations, sense.translations) &&
        Objects.equals(this.variantForms, sense.variantForms)&&
        Objects.equals(this.additionalProperties, sense.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(crossReferenceMarkers, crossReferences, definitions, domains, examples, id, notes, pronunciations, regions, registers, shortDefinitions, subsenses, thesaurusLinks, translations, variantForms, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Sense {\n");
    sb.append("    crossReferenceMarkers: ").append(toIndentedString(crossReferenceMarkers)).append("\n");
    sb.append("    crossReferences: ").append(toIndentedString(crossReferences)).append("\n");
    sb.append("    definitions: ").append(toIndentedString(definitions)).append("\n");
    sb.append("    domains: ").append(toIndentedString(domains)).append("\n");
    sb.append("    examples: ").append(toIndentedString(examples)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    pronunciations: ").append(toIndentedString(pronunciations)).append("\n");
    sb.append("    regions: ").append(toIndentedString(regions)).append("\n");
    sb.append("    registers: ").append(toIndentedString(registers)).append("\n");
    sb.append("    shortDefinitions: ").append(toIndentedString(shortDefinitions)).append("\n");
    sb.append("    subsenses: ").append(toIndentedString(subsenses)).append("\n");
    sb.append("    thesaurusLinks: ").append(toIndentedString(thesaurusLinks)).append("\n");
    sb.append("    translations: ").append(toIndentedString(translations)).append("\n");
    sb.append("    variantForms: ").append(toIndentedString(variantForms)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("crossReferenceMarkers");
    openapiFields.add("crossReferences");
    openapiFields.add("definitions");
    openapiFields.add("domains");
    openapiFields.add("examples");
    openapiFields.add("id");
    openapiFields.add("notes");
    openapiFields.add("pronunciations");
    openapiFields.add("regions");
    openapiFields.add("registers");
    openapiFields.add("short_definitions");
    openapiFields.add("subsenses");
    openapiFields.add("thesaurusLinks");
    openapiFields.add("translations");
    openapiFields.add("variantForms");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Sense
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Sense.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Sense is not found in the empty JSON string", Sense.openapiRequiredFields.toString()));
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("crossReferenceMarkers") != null && !jsonObj.get("crossReferenceMarkers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `crossReferenceMarkers` to be an array in the JSON string but got `%s`", jsonObj.get("crossReferenceMarkers").toString()));
      }
      if (jsonObj.get("crossReferences") != null && !jsonObj.get("crossReferences").isJsonNull()) {
        JsonArray jsonArraycrossReferences = jsonObj.getAsJsonArray("crossReferences");
        if (jsonArraycrossReferences != null) {
          // ensure the json data is an array
          if (!jsonObj.get("crossReferences").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `crossReferences` to be an array in the JSON string but got `%s`", jsonObj.get("crossReferences").toString()));
          }

          // validate the optional field `crossReferences` (array)
          for (int i = 0; i < jsonArraycrossReferences.size(); i++) {
            CrossReferencesListInner.validateJsonObject(jsonArraycrossReferences.get(i).getAsJsonObject());
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("definitions") != null && !jsonObj.get("definitions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `definitions` to be an array in the JSON string but got `%s`", jsonObj.get("definitions").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("domains") != null && !jsonObj.get("domains").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `domains` to be an array in the JSON string but got `%s`", jsonObj.get("domains").toString()));
      }
      if (jsonObj.get("examples") != null && !jsonObj.get("examples").isJsonNull()) {
        JsonArray jsonArrayexamples = jsonObj.getAsJsonArray("examples");
        if (jsonArrayexamples != null) {
          // ensure the json data is an array
          if (!jsonObj.get("examples").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `examples` to be an array in the JSON string but got `%s`", jsonObj.get("examples").toString()));
          }

          // validate the optional field `examples` (array)
          for (int i = 0; i < jsonArrayexamples.size(); i++) {
            ExamplesListInner.validateJsonObject(jsonArrayexamples.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) {
        JsonArray jsonArraynotes = jsonObj.getAsJsonArray("notes");
        if (jsonArraynotes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("notes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `notes` to be an array in the JSON string but got `%s`", jsonObj.get("notes").toString()));
          }

          // validate the optional field `notes` (array)
          for (int i = 0; i < jsonArraynotes.size(); i++) {
            CategorizedTextListInner.validateJsonObject(jsonArraynotes.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("pronunciations") != null && !jsonObj.get("pronunciations").isJsonNull()) {
        JsonArray jsonArraypronunciations = jsonObj.getAsJsonArray("pronunciations");
        if (jsonArraypronunciations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("pronunciations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `pronunciations` to be an array in the JSON string but got `%s`", jsonObj.get("pronunciations").toString()));
          }

          // validate the optional field `pronunciations` (array)
          for (int i = 0; i < jsonArraypronunciations.size(); i++) {
            PronunciationsListInner.validateJsonObject(jsonArraypronunciations.get(i).getAsJsonObject());
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("regions") != null && !jsonObj.get("regions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `regions` to be an array in the JSON string but got `%s`", jsonObj.get("regions").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("registers") != null && !jsonObj.get("registers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `registers` to be an array in the JSON string but got `%s`", jsonObj.get("registers").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("short_definitions") != null && !jsonObj.get("short_definitions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `short_definitions` to be an array in the JSON string but got `%s`", jsonObj.get("short_definitions").toString()));
      }
      if (jsonObj.get("subsenses") != null && !jsonObj.get("subsenses").isJsonNull()) {
        JsonArray jsonArraysubsenses = jsonObj.getAsJsonArray("subsenses");
        if (jsonArraysubsenses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("subsenses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `subsenses` to be an array in the JSON string but got `%s`", jsonObj.get("subsenses").toString()));
          }

          // validate the optional field `subsenses` (array)
          for (int i = 0; i < jsonArraysubsenses.size(); i++) {
            Sense.validateJsonObject(jsonArraysubsenses.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("thesaurusLinks") != null && !jsonObj.get("thesaurusLinks").isJsonNull()) {
        JsonArray jsonArraythesaurusLinks = jsonObj.getAsJsonArray("thesaurusLinks");
        if (jsonArraythesaurusLinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("thesaurusLinks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `thesaurusLinks` to be an array in the JSON string but got `%s`", jsonObj.get("thesaurusLinks").toString()));
          }

          // validate the optional field `thesaurusLinks` (array)
          for (int i = 0; i < jsonArraythesaurusLinks.size(); i++) {
            ThesaurusLink.validateJsonObject(jsonArraythesaurusLinks.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("translations") != null && !jsonObj.get("translations").isJsonNull()) {
        JsonArray jsonArraytranslations = jsonObj.getAsJsonArray("translations");
        if (jsonArraytranslations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("translations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `translations` to be an array in the JSON string but got `%s`", jsonObj.get("translations").toString()));
          }

          // validate the optional field `translations` (array)
          for (int i = 0; i < jsonArraytranslations.size(); i++) {
            TranslationsListInner.validateJsonObject(jsonArraytranslations.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("variantForms") != null && !jsonObj.get("variantForms").isJsonNull()) {
        JsonArray jsonArrayvariantForms = jsonObj.getAsJsonArray("variantForms");
        if (jsonArrayvariantForms != null) {
          // ensure the json data is an array
          if (!jsonObj.get("variantForms").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `variantForms` to be an array in the JSON string but got `%s`", jsonObj.get("variantForms").toString()));
          }

          // validate the optional field `variantForms` (array)
          for (int i = 0; i < jsonArrayvariantForms.size(); i++) {
            VariantFormsListInner.validateJsonObject(jsonArrayvariantForms.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Sense.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Sense' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Sense> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Sense.class));

       return (TypeAdapter<T>) new TypeAdapter<Sense>() {
           @Override
           public void write(JsonWriter out, Sense value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Sense read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Sense instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Sense given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Sense
  * @throws IOException if the JSON string is invalid with respect to Sense
  */
  public static Sense fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Sense.class);
  }

 /**
  * Convert an instance of Sense to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

