/*
 * Oxford Dictionaries
 * Oxford Dictionaries, part of the Oxford Language Division, is a leading authority on the English language. It offers a wide range of language resources, including dictionaries, thesauruses, grammar guides, and language learning tools. Oxford Dictionaries provides accurate and up-to-date definitions, word origins, and usage examples to support language comprehension and communication.
 *
 * The version of the OpenAPI document: 1.11.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Wordlist;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class WordlistApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WordlistApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public WordlistApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getAppId() == null) {
            throw new IllegalArgumentException("\"app_id\" is required but no API key was provided. Please set \"app_id\" with ApiClient#setAppId(String).");
        }
        if (apiClient.getAppKey() == null) {
            throw new IllegalArgumentException("\"app_key\" is required but no API key was provided. Please set \"app_key\" with ApiClient#setAppKey(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getAdvancedWordsCall(String sourceLang, String filtersAdvanced, String exclude, String excludeSenses, String excludePrimeSenses, String wordLength, String prefix, Boolean exact, String limit, String offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/wordlist/{source_lang}/{filters_advanced}"
            .replace("{" + "source_lang" + "}", localVarApiClient.escapeString(sourceLang.toString()))
            .replace("{" + "filters_advanced" + "}", localVarApiClient.escapeString(filtersAdvanced.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (exclude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude", exclude));
        }

        if (excludeSenses != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_senses", excludeSenses));
        }

        if (excludePrimeSenses != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_prime_senses", excludePrimeSenses));
        }

        if (wordLength != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("word_length", wordLength));
        }

        if (prefix != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prefix", prefix));
        }

        if (exact != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exact", exact));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appId", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAdvancedWordsValidateBeforeCall(String sourceLang, String filtersAdvanced, String exclude, String excludeSenses, String excludePrimeSenses, String wordLength, String prefix, Boolean exact, String limit, String offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sourceLang' is set
        if (sourceLang == null) {
            throw new ApiException("Missing the required parameter 'sourceLang' when calling getAdvancedWords(Async)");
        }

        // verify the required parameter 'filtersAdvanced' is set
        if (filtersAdvanced == null) {
            throw new ApiException("Missing the required parameter 'filtersAdvanced' when calling getAdvancedWords(Async)");
        }

        return getAdvancedWordsCall(sourceLang, filtersAdvanced, exclude, excludeSenses, excludePrimeSenses, wordLength, prefix, exact, limit, offset, _callback);

    }


    private ApiResponse<Wordlist> getAdvancedWordsWithHttpInfo(String sourceLang, String filtersAdvanced, String exclude, String excludeSenses, String excludePrimeSenses, String wordLength, String prefix, Boolean exact, String limit, String offset) throws ApiException {
        okhttp3.Call localVarCall = getAdvancedWordsValidateBeforeCall(sourceLang, filtersAdvanced, exclude, excludeSenses, excludePrimeSenses, wordLength, prefix, exact, limit, offset, null);
        Type localVarReturnType = new TypeToken<Wordlist>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAdvancedWordsAsync(String sourceLang, String filtersAdvanced, String exclude, String excludeSenses, String excludePrimeSenses, String wordLength, String prefix, Boolean exact, String limit, String offset, final ApiCallback<Wordlist> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAdvancedWordsValidateBeforeCall(sourceLang, filtersAdvanced, exclude, excludeSenses, excludePrimeSenses, wordLength, prefix, exact, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<Wordlist>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAdvancedWordsRequestBuilder {
        private final String sourceLang;
        private final String filtersAdvanced;
        private String exclude;
        private String excludeSenses;
        private String excludePrimeSenses;
        private String wordLength;
        private String prefix;
        private Boolean exact;
        private String limit;
        private String offset;

        private GetAdvancedWordsRequestBuilder(String sourceLang, String filtersAdvanced) {
            this.sourceLang = sourceLang;
            this.filtersAdvanced = filtersAdvanced;
        }

        /**
         * Set exclude
         * @param exclude Semicolon separated list of parameters-value pairs (same as filters). Excludes headwords that have any senses in specified exclusion attributes (lexical categories, domains, etc.) from results. (optional)
         * @return GetAdvancedWordsRequestBuilder
         */
        public GetAdvancedWordsRequestBuilder exclude(String exclude) {
            this.exclude = exclude;
            return this;
        }
        
        /**
         * Set excludeSenses
         * @param excludeSenses Semicolon separated list of parameters-value pairs (same as filters). Excludes only those senses of a particular headword that match specified exclusion attributes (lexical categories, domains, etc.) from results but includes the headword if it has other permitted senses. (optional)
         * @return GetAdvancedWordsRequestBuilder
         */
        public GetAdvancedWordsRequestBuilder excludeSenses(String excludeSenses) {
            this.excludeSenses = excludeSenses;
            return this;
        }
        
        /**
         * Set excludePrimeSenses
         * @param excludePrimeSenses Semicolon separated list of parameters-value pairs (same as filters). Excludes a headword only if the primary sense matches the specified exclusion attributes (registers, domains only). (optional)
         * @return GetAdvancedWordsRequestBuilder
         */
        public GetAdvancedWordsRequestBuilder excludePrimeSenses(String excludePrimeSenses) {
            this.excludePrimeSenses = excludePrimeSenses;
            return this;
        }
        
        /**
         * Set wordLength
         * @param wordLength Parameter to speficy the minimum (&gt;), exact or maximum (&lt;) length of the words required. E.g., &gt;5 - more than 5 chars; &lt;4 - less than 4 chars; &gt;5&lt;10 - from 5 to 10 chars; 3 - exactly 3 chars. (optional, default to &gt;5,&lt;10)
         * @return GetAdvancedWordsRequestBuilder
         */
        public GetAdvancedWordsRequestBuilder wordLength(String wordLength) {
            this.wordLength = wordLength;
            return this;
        }
        
        /**
         * Set prefix
         * @param prefix Filter words that start with prefix parameter (optional, default to goal)
         * @return GetAdvancedWordsRequestBuilder
         */
        public GetAdvancedWordsRequestBuilder prefix(String prefix) {
            this.prefix = prefix;
            return this;
        }
        
        /**
         * Set exact
         * @param exact If exact&#x3D;true wordlist returns a list of entries that exactly matches the search string. Otherwise wordlist lists entries that start with prefix string. (optional, default to false)
         * @return GetAdvancedWordsRequestBuilder
         */
        public GetAdvancedWordsRequestBuilder exact(Boolean exact) {
            this.exact = exact;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Limit the number of results per response. Default and maximum limit is 5000. (optional)
         * @return GetAdvancedWordsRequestBuilder
         */
        public GetAdvancedWordsRequestBuilder limit(String limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Offset the start number of the result. (optional)
         * @return GetAdvancedWordsRequestBuilder
         */
        public GetAdvancedWordsRequestBuilder offset(String offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getAdvancedWords
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> disjoint sets of word_length values (eg &lt;3&gt;10); filter has no values; total number of filters &gt; 20; filters and excludes values can not be the same; source_lang and translations can not be same; word_length conflicts with prefix length. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No entries is found matching supplied filters or lang or filters is not recognized.  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Error. An error occurred while processing the data.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAdvancedWordsCall(sourceLang, filtersAdvanced, exclude, excludeSenses, excludePrimeSenses, wordLength, prefix, exact, limit, offset, _callback);
        }


        /**
         * Execute getAdvancedWords request
         * @return Wordlist
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> disjoint sets of word_length values (eg &lt;3&gt;10); filter has no values; total number of filters &gt; 20; filters and excludes values can not be the same; source_lang and translations can not be same; word_length conflicts with prefix length. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No entries is found matching supplied filters or lang or filters is not recognized.  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Error. An error occurred while processing the data.  </td><td>  -  </td></tr>
         </table>
         */
        public Wordlist execute() throws ApiException {
            ApiResponse<Wordlist> localVarResp = getAdvancedWordsWithHttpInfo(sourceLang, filtersAdvanced, exclude, excludeSenses, excludePrimeSenses, wordLength, prefix, exact, limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAdvancedWords request with HTTP info returned
         * @return ApiResponse&lt;Wordlist&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> disjoint sets of word_length values (eg &lt;3&gt;10); filter has no values; total number of filters &gt; 20; filters and excludes values can not be the same; source_lang and translations can not be same; word_length conflicts with prefix length. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No entries is found matching supplied filters or lang or filters is not recognized.  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Error. An error occurred while processing the data.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Wordlist> executeWithHttpInfo() throws ApiException {
            return getAdvancedWordsWithHttpInfo(sourceLang, filtersAdvanced, exclude, excludeSenses, excludePrimeSenses, wordLength, prefix, exact, limit, offset);
        }

        /**
         * Execute getAdvancedWords request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> disjoint sets of word_length values (eg &lt;3&gt;10); filter has no values; total number of filters &gt; 20; filters and excludes values can not be the same; source_lang and translations can not be same; word_length conflicts with prefix length. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No entries is found matching supplied filters or lang or filters is not recognized.  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Error. An error occurred while processing the data.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Wordlist> _callback) throws ApiException {
            return getAdvancedWordsAsync(sourceLang, filtersAdvanced, exclude, excludeSenses, excludePrimeSenses, wordLength, prefix, exact, limit, offset, _callback);
        }
    }

    /**
     * Retrieve list of words for category with advanced options
     * Use this to apply more complex filters to the [list of words](documentation/glossary?term&#x3D;wordlist). For example, you may only want to filter out words for which all [senses](documentation/glossary?term&#x3D;sense) match the filter, or only its &#39;prime sense&#39;. You can also filter by word length or match by substring (prefix).     &lt;div id&#x3D;\&quot;wordlist_advanced\&quot;&gt;&lt;/div&gt; 
     * @param sourceLang IANA language code (required)
     * @param filtersAdvanced Semicolon separated list of wordlist parameters, presented as value pairs: LexicalCategory, domains, regions, registers. Parameters can take comma separated list of values. E.g., lexicalCategory&#x3D;noun,adjective;domains&#x3D;sport. Number of values limited to 5. (required)
     * @return GetAdvancedWordsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> disjoint sets of word_length values (eg &lt;3&gt;10); filter has no values; total number of filters &gt; 20; filters and excludes values can not be the same; source_lang and translations can not be same; word_length conflicts with prefix length. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No entries is found matching supplied filters or lang or filters is not recognized.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error. An error occurred while processing the data.  </td><td>  -  </td></tr>
     </table>
     */
    public GetAdvancedWordsRequestBuilder getAdvancedWords(String sourceLang, String filtersAdvanced) throws IllegalArgumentException {
        if (sourceLang == null) throw new IllegalArgumentException("\"sourceLang\" is required but got null");
            

        if (filtersAdvanced == null) throw new IllegalArgumentException("\"filtersAdvanced\" is required but got null");
            

        return new GetAdvancedWordsRequestBuilder(sourceLang, filtersAdvanced);
    }
    private okhttp3.Call getCategoryWordsCall(String sourceLang, String filtersBasic, String limit, String offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/wordlist/{source_lang}/{filters_basic}"
            .replace("{" + "source_lang" + "}", localVarApiClient.escapeString(sourceLang.toString()))
            .replace("{" + "filters_basic" + "}", localVarApiClient.escapeString(filtersBasic.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appId", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCategoryWordsValidateBeforeCall(String sourceLang, String filtersBasic, String limit, String offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sourceLang' is set
        if (sourceLang == null) {
            throw new ApiException("Missing the required parameter 'sourceLang' when calling getCategoryWords(Async)");
        }

        // verify the required parameter 'filtersBasic' is set
        if (filtersBasic == null) {
            throw new ApiException("Missing the required parameter 'filtersBasic' when calling getCategoryWords(Async)");
        }

        return getCategoryWordsCall(sourceLang, filtersBasic, limit, offset, _callback);

    }


    private ApiResponse<Wordlist> getCategoryWordsWithHttpInfo(String sourceLang, String filtersBasic, String limit, String offset) throws ApiException {
        okhttp3.Call localVarCall = getCategoryWordsValidateBeforeCall(sourceLang, filtersBasic, limit, offset, null);
        Type localVarReturnType = new TypeToken<Wordlist>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCategoryWordsAsync(String sourceLang, String filtersBasic, String limit, String offset, final ApiCallback<Wordlist> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCategoryWordsValidateBeforeCall(sourceLang, filtersBasic, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<Wordlist>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCategoryWordsRequestBuilder {
        private final String sourceLang;
        private final String filtersBasic;
        private String limit;
        private String offset;

        private GetCategoryWordsRequestBuilder(String sourceLang, String filtersBasic) {
            this.sourceLang = sourceLang;
            this.filtersBasic = filtersBasic;
        }

        /**
         * Set limit
         * @param limit Limit the number of results per response. Default and maximum limit is 5000. (optional)
         * @return GetCategoryWordsRequestBuilder
         */
        public GetCategoryWordsRequestBuilder limit(String limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Offset the start number of the result (optional)
         * @return GetCategoryWordsRequestBuilder
         */
        public GetCategoryWordsRequestBuilder offset(String offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getCategoryWords
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> filter has no values; total number of filters &gt; 20. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No entries is found matching supplied filters or lang or filters is not recognized.  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Error. An error occurred while processing the data.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCategoryWordsCall(sourceLang, filtersBasic, limit, offset, _callback);
        }


        /**
         * Execute getCategoryWords request
         * @return Wordlist
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> filter has no values; total number of filters &gt; 20. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No entries is found matching supplied filters or lang or filters is not recognized.  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Error. An error occurred while processing the data.  </td><td>  -  </td></tr>
         </table>
         */
        public Wordlist execute() throws ApiException {
            ApiResponse<Wordlist> localVarResp = getCategoryWordsWithHttpInfo(sourceLang, filtersBasic, limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCategoryWords request with HTTP info returned
         * @return ApiResponse&lt;Wordlist&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> filter has no values; total number of filters &gt; 20. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No entries is found matching supplied filters or lang or filters is not recognized.  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Error. An error occurred while processing the data.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Wordlist> executeWithHttpInfo() throws ApiException {
            return getCategoryWordsWithHttpInfo(sourceLang, filtersBasic, limit, offset);
        }

        /**
         * Execute getCategoryWords request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> filter has no values; total number of filters &gt; 20. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No entries is found matching supplied filters or lang or filters is not recognized.  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Error. An error occurred while processing the data.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Wordlist> _callback) throws ApiException {
            return getCategoryWordsAsync(sourceLang, filtersBasic, limit, offset, _callback);
        }
    }

    /**
     * Retrieve a list of words in a category
     *  Use this to retrieve a [list of words](documentation/glossary?term&#x3D;wordlist) for particular [domain](documentation/glossary?term&#x3D;domain), [lexical category](documentation/glossary?term&#x3D;lexicalcategory), [register](documentation/glossary?term&#x3D;registers) and/or [region](documentation/glossary?term&#x3D;regions). View the full list of possible filters using the filters Utility endpoint.  The response only includes [headwords](documentation/glossary?term&#x3D;headword), not all their possible [inflections](documentation/glossary?term&#x3D;inflection). If you require a full [wordlist](documentation/glossary?term&#x3D;wordlist) including [inflected forms](documentation/glossary?term&#x3D;inflection), contact us and we can help.    &lt;div id&#x3D;\&quot;wordlist\&quot;&gt;&lt;/div&gt; 
     * @param sourceLang IANA language code (required)
     * @param filtersBasic Semicolon separated list of wordlist parameters, presented as value pairs: LexicalCategory, domains, regions, registers. Parameters can take comma separated list of values. E.g., lexicalCategory&#x3D;noun,adjective;domains&#x3D;sport. Number of values limited to 5. (required)
     * @return GetCategoryWordsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> filter has no values; total number of filters &gt; 20. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No entries is found matching supplied filters or lang or filters is not recognized.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error. An error occurred while processing the data.  </td><td>  -  </td></tr>
     </table>
     */
    public GetCategoryWordsRequestBuilder getCategoryWords(String sourceLang, String filtersBasic) throws IllegalArgumentException {
        if (sourceLang == null) throw new IllegalArgumentException("\"sourceLang\" is required but got null");
            

        if (filtersBasic == null) throw new IllegalArgumentException("\"filtersBasic\" is required but got null");
            

        return new GetCategoryWordsRequestBuilder(sourceLang, filtersBasic);
    }
}
