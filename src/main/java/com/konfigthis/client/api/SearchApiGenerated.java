/*
 * Oxford Dictionaries
 * Oxford Dictionaries, part of the Oxford Language Division, is a leading authority on the English language. It offers a wide range of language resources, including dictionaries, thesauruses, grammar guides, and language learning tools. Oxford Dictionaries provides accurate and up-to-date definitions, word origins, and usage examples to support language comprehension and communication.
 *
 * The version of the OpenAPI document: 1.11.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Wordlist;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class SearchApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SearchApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public SearchApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getAppId() == null) {
            throw new IllegalArgumentException("\"app_id\" is required but no API key was provided. Please set \"app_id\" with ApiClient#setAppId(String).");
        }
        if (apiClient.getAppKey() == null) {
            throw new IllegalArgumentException("\"app_key\" is required but no API key was provided. Please set \"app_key\" with ApiClient#setAppKey(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getMatchesCall(String sourceLang, String q, Boolean prefix, String regions, String limit, String offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/search/{source_lang}"
            .replace("{" + "source_lang" + "}", localVarApiClient.escapeString(sourceLang.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (prefix != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prefix", prefix));
        }

        if (regions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("regions", regions));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appId", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMatchesValidateBeforeCall(String sourceLang, String q, Boolean prefix, String regions, String limit, String offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sourceLang' is set
        if (sourceLang == null) {
            throw new ApiException("Missing the required parameter 'sourceLang' when calling getMatches(Async)");
        }

        return getMatchesCall(sourceLang, q, prefix, regions, limit, offset, _callback);

    }


    private ApiResponse<Wordlist> getMatchesWithHttpInfo(String sourceLang, String q, Boolean prefix, String regions, String limit, String offset) throws ApiException {
        okhttp3.Call localVarCall = getMatchesValidateBeforeCall(sourceLang, q, prefix, regions, limit, offset, null);
        Type localVarReturnType = new TypeToken<Wordlist>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getMatchesAsync(String sourceLang, String q, Boolean prefix, String regions, String limit, String offset, final ApiCallback<Wordlist> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMatchesValidateBeforeCall(sourceLang, q, prefix, regions, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<Wordlist>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetMatchesRequestBuilder {
        private final String sourceLang;
        private String q;
        private Boolean prefix;
        private String regions;
        private String limit;
        private String offset;

        private GetMatchesRequestBuilder(String sourceLang) {
            this.sourceLang = sourceLang;
        }

        /**
         * Set q
         * @param q Search string (optional, default to eye)
         * @return GetMatchesRequestBuilder
         */
        public GetMatchesRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Set prefix
         * @param prefix Set prefix to true if you&#39;d like to get results only starting with search string. (optional, default to false)
         * @return GetMatchesRequestBuilder
         */
        public GetMatchesRequestBuilder prefix(Boolean prefix) {
            this.prefix = prefix;
            return this;
        }
        
        /**
         * Set regions
         * @param regions If searching in English, filter words with specific region(s) either &#39;us&#39; or &#39;gb&#39;. (optional)
         * @return GetMatchesRequestBuilder
         */
        public GetMatchesRequestBuilder regions(String regions) {
            this.regions = regions;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Limit the number of results per response. Default and maximum limit is 5000. (optional)
         * @return GetMatchesRequestBuilder
         */
        public GetMatchesRequestBuilder limit(String limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Offset the start number of the result. (optional)
         * @return GetMatchesRequestBuilder
         */
        public GetMatchesRequestBuilder offset(String offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getMatches
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No entry is found matching supplied id and source_lang or filters are not recognized  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Error. An error occurred while processing the data.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMatchesCall(sourceLang, q, prefix, regions, limit, offset, _callback);
        }


        /**
         * Execute getMatches request
         * @return Wordlist
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No entry is found matching supplied id and source_lang or filters are not recognized  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Error. An error occurred while processing the data.  </td><td>  -  </td></tr>
         </table>
         */
        public Wordlist execute() throws ApiException {
            ApiResponse<Wordlist> localVarResp = getMatchesWithHttpInfo(sourceLang, q, prefix, regions, limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getMatches request with HTTP info returned
         * @return ApiResponse&lt;Wordlist&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No entry is found matching supplied id and source_lang or filters are not recognized  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Error. An error occurred while processing the data.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Wordlist> executeWithHttpInfo() throws ApiException {
            return getMatchesWithHttpInfo(sourceLang, q, prefix, regions, limit, offset);
        }

        /**
         * Execute getMatches request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No entry is found matching supplied id and source_lang or filters are not recognized  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Error. An error occurred while processing the data.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Wordlist> _callback) throws ApiException {
            return getMatchesAsync(sourceLang, q, prefix, regions, limit, offset, _callback);
        }
    }

    /**
     * Retrieve possible matches to input
     *  Use this to retrieve possible [headword](documentation/glossary?term&#x3D;headword) matches for a given string of text. The results are culculated using headword matching, fuzzy matching, and [lemmatization](documentation/glossary?term&#x3D;lemma)     &lt;div id&#x3D;\&quot;search\&quot;&gt;&lt;/div&gt; 
     * @param sourceLang IANA language code (required)
     * @return GetMatchesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No entry is found matching supplied id and source_lang or filters are not recognized  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error. An error occurred while processing the data.  </td><td>  -  </td></tr>
     </table>
     * find more info here
     * @see <a href="https://helloreverb.com/about">Retrieve possible matches to input Documentation</a>
     */
    public GetMatchesRequestBuilder getMatches(String sourceLang) throws IllegalArgumentException {
        if (sourceLang == null) throw new IllegalArgumentException("\"sourceLang\" is required but got null");
            

        return new GetMatchesRequestBuilder(sourceLang);
    }
    private okhttp3.Call possibleTranslationsCall(String sourceSearchLanguage, String targetSearchLanguage, String q, Boolean prefix, String regions, String limit, String offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/search/{source_search_language}/translations={target_search_language}"
            .replace("{" + "source_search_language" + "}", localVarApiClient.escapeString(sourceSearchLanguage.toString()))
            .replace("{" + "target_search_language" + "}", localVarApiClient.escapeString(targetSearchLanguage.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (prefix != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prefix", prefix));
        }

        if (regions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("regions", regions));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appId", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call possibleTranslationsValidateBeforeCall(String sourceSearchLanguage, String targetSearchLanguage, String q, Boolean prefix, String regions, String limit, String offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sourceSearchLanguage' is set
        if (sourceSearchLanguage == null) {
            throw new ApiException("Missing the required parameter 'sourceSearchLanguage' when calling possibleTranslations(Async)");
        }

        // verify the required parameter 'targetSearchLanguage' is set
        if (targetSearchLanguage == null) {
            throw new ApiException("Missing the required parameter 'targetSearchLanguage' when calling possibleTranslations(Async)");
        }

        return possibleTranslationsCall(sourceSearchLanguage, targetSearchLanguage, q, prefix, regions, limit, offset, _callback);

    }


    private ApiResponse<Wordlist> possibleTranslationsWithHttpInfo(String sourceSearchLanguage, String targetSearchLanguage, String q, Boolean prefix, String regions, String limit, String offset) throws ApiException {
        okhttp3.Call localVarCall = possibleTranslationsValidateBeforeCall(sourceSearchLanguage, targetSearchLanguage, q, prefix, regions, limit, offset, null);
        Type localVarReturnType = new TypeToken<Wordlist>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call possibleTranslationsAsync(String sourceSearchLanguage, String targetSearchLanguage, String q, Boolean prefix, String regions, String limit, String offset, final ApiCallback<Wordlist> _callback) throws ApiException {

        okhttp3.Call localVarCall = possibleTranslationsValidateBeforeCall(sourceSearchLanguage, targetSearchLanguage, q, prefix, regions, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<Wordlist>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class PossibleTranslationsRequestBuilder {
        private final String sourceSearchLanguage;
        private final String targetSearchLanguage;
        private String q;
        private Boolean prefix;
        private String regions;
        private String limit;
        private String offset;

        private PossibleTranslationsRequestBuilder(String sourceSearchLanguage, String targetSearchLanguage) {
            this.sourceSearchLanguage = sourceSearchLanguage;
            this.targetSearchLanguage = targetSearchLanguage;
        }

        /**
         * Set q
         * @param q Search string. (optional, default to eye)
         * @return PossibleTranslationsRequestBuilder
         */
        public PossibleTranslationsRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Set prefix
         * @param prefix Set prefix to true if you&#39;d like to get results only starting with search string. (optional, default to false)
         * @return PossibleTranslationsRequestBuilder
         */
        public PossibleTranslationsRequestBuilder prefix(Boolean prefix) {
            this.prefix = prefix;
            return this;
        }
        
        /**
         * Set regions
         * @param regions Filter words with specific region(s) E.g., regions&#x3D;us. For now gb, us are available for en language. (optional)
         * @return PossibleTranslationsRequestBuilder
         */
        public PossibleTranslationsRequestBuilder regions(String regions) {
            this.regions = regions;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Limit the number of results per response. Default and maximum limit is 5000. (optional)
         * @return PossibleTranslationsRequestBuilder
         */
        public PossibleTranslationsRequestBuilder limit(String limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Offset the start number of the result. (optional)
         * @return PossibleTranslationsRequestBuilder
         */
        public PossibleTranslationsRequestBuilder offset(String offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for possibleTranslations
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No entry is found matching supplied id and source_lang or filters are not recognized  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Error. An error occurred while processing the data.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return possibleTranslationsCall(sourceSearchLanguage, targetSearchLanguage, q, prefix, regions, limit, offset, _callback);
        }


        /**
         * Execute possibleTranslations request
         * @return Wordlist
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No entry is found matching supplied id and source_lang or filters are not recognized  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Error. An error occurred while processing the data.  </td><td>  -  </td></tr>
         </table>
         */
        public Wordlist execute() throws ApiException {
            ApiResponse<Wordlist> localVarResp = possibleTranslationsWithHttpInfo(sourceSearchLanguage, targetSearchLanguage, q, prefix, regions, limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute possibleTranslations request with HTTP info returned
         * @return ApiResponse&lt;Wordlist&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No entry is found matching supplied id and source_lang or filters are not recognized  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Error. An error occurred while processing the data.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Wordlist> executeWithHttpInfo() throws ApiException {
            return possibleTranslationsWithHttpInfo(sourceSearchLanguage, targetSearchLanguage, q, prefix, regions, limit, offset);
        }

        /**
         * Execute possibleTranslations request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No entry is found matching supplied id and source_lang or filters are not recognized  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Error. An error occurred while processing the data.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Wordlist> _callback) throws ApiException {
            return possibleTranslationsAsync(sourceSearchLanguage, targetSearchLanguage, q, prefix, regions, limit, offset, _callback);
        }
    }

    /**
     * Retrieve possible translation matches to input
     *  Use this to find matches in our translation dictionaries.    &lt;div id&#x3D;\&quot;search_translation\&quot;&gt;&lt;/div&gt; 
     * @param sourceSearchLanguage IANA language code (required)
     * @param targetSearchLanguage IANA language code (required)
     * @return PossibleTranslationsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No entry is found matching supplied id and source_lang or filters are not recognized  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error. An error occurred while processing the data.  </td><td>  -  </td></tr>
     </table>
     * find more info here
     * @see <a href="https://helloreverb.com/about">Retrieve possible translation matches to input Documentation</a>
     */
    public PossibleTranslationsRequestBuilder possibleTranslations(String sourceSearchLanguage, String targetSearchLanguage) throws IllegalArgumentException {
        if (sourceSearchLanguage == null) throw new IllegalArgumentException("\"sourceSearchLanguage\" is required but got null");
            

        if (targetSearchLanguage == null) throw new IllegalArgumentException("\"targetSearchLanguage\" is required but got null");
            

        return new PossibleTranslationsRequestBuilder(sourceSearchLanguage, targetSearchLanguage);
    }
}
