/*
 * Oxford Dictionaries
 * Oxford Dictionaries, part of the Oxford Language Division, is a leading authority on the English language. It offers a wide range of language resources, including dictionaries, thesauruses, grammar guides, and language learning tools. Oxford Dictionaries provides accurate and up-to-date definitions, word origins, and usage examples to support language comprehension and communication.
 *
 * The version of the OpenAPI document: 1.11.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Filters;
import com.konfigthis.client.model.Languages;
import com.konfigthis.client.model.Regions;
import com.konfigthis.client.model.UtilityLabels;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class UtilityApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UtilityApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public UtilityApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getAppId() == null) {
            throw new IllegalArgumentException("\"app_id\" is required but no API key was provided. Please set \"app_id\" with ApiClient#setAppId(String).");
        }
        if (apiClient.getAppKey() == null) {
            throw new IllegalArgumentException("\"app_key\" is required but no API key was provided. Please set \"app_key\" with ApiClient#setAppKey(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getGrammaticalFeaturesCall(String sourceLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/grammaticalFeatures/{source_language}"
            .replace("{" + "source_language" + "}", localVarApiClient.escapeString(sourceLanguage.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appId", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGrammaticalFeaturesValidateBeforeCall(String sourceLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sourceLanguage' is set
        if (sourceLanguage == null) {
            throw new ApiException("Missing the required parameter 'sourceLanguage' when calling getGrammaticalFeatures(Async)");
        }

        return getGrammaticalFeaturesCall(sourceLanguage, _callback);

    }


    private ApiResponse<UtilityLabels> getGrammaticalFeaturesWithHttpInfo(String sourceLanguage) throws ApiException {
        okhttp3.Call localVarCall = getGrammaticalFeaturesValidateBeforeCall(sourceLanguage, null);
        Type localVarReturnType = new TypeToken<UtilityLabels>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getGrammaticalFeaturesAsync(String sourceLanguage, final ApiCallback<UtilityLabels> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGrammaticalFeaturesValidateBeforeCall(sourceLanguage, _callback);
        Type localVarReturnType = new TypeToken<UtilityLabels>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetGrammaticalFeaturesRequestBuilder {
        private final String sourceLanguage;

        private GetGrammaticalFeaturesRequestBuilder(String sourceLanguage) {
            this.sourceLanguage = sourceLanguage;
        }

        /**
         * Build call for getGrammaticalFeatures
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Unknown source_language. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getGrammaticalFeaturesCall(sourceLanguage, _callback);
        }


        /**
         * Execute getGrammaticalFeatures request
         * @return UtilityLabels
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Unknown source_language. </td><td>  -  </td></tr>
         </table>
         */
        public UtilityLabels execute() throws ApiException {
            ApiResponse<UtilityLabels> localVarResp = getGrammaticalFeaturesWithHttpInfo(sourceLanguage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getGrammaticalFeatures request with HTTP info returned
         * @return ApiResponse&lt;UtilityLabels&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Unknown source_language. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UtilityLabels> executeWithHttpInfo() throws ApiException {
            return getGrammaticalFeaturesWithHttpInfo(sourceLanguage);
        }

        /**
         * Execute getGrammaticalFeatures request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Unknown source_language. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UtilityLabels> _callback) throws ApiException {
            return getGrammaticalFeaturesAsync(sourceLanguage, _callback);
        }
    }

    /**
     * Lists available grammatical features in a dataset
     * Returns a list of the available [grammatical features](documentation/glossary?term&#x3D;grammaticalfeatures) for a given language dataset. 
     * @param sourceLanguage IANA language code. If provided output will be filtered by sourceLanguage. (required)
     * @return GetGrammaticalFeaturesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unknown source_language. </td><td>  -  </td></tr>
     </table>
     */
    public GetGrammaticalFeaturesRequestBuilder getGrammaticalFeatures(String sourceLanguage) throws IllegalArgumentException {
        if (sourceLanguage == null) throw new IllegalArgumentException("\"sourceLanguage\" is required but got null");
            

        return new GetGrammaticalFeaturesRequestBuilder(sourceLanguage);
    }
    private okhttp3.Call getLexicalCategoriesCall(String language, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lexicalcategories/{language}"
            .replace("{" + "language" + "}", localVarApiClient.escapeString(language.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appId", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLexicalCategoriesValidateBeforeCall(String language, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'language' is set
        if (language == null) {
            throw new ApiException("Missing the required parameter 'language' when calling getLexicalCategories(Async)");
        }

        return getLexicalCategoriesCall(language, _callback);

    }


    private ApiResponse<UtilityLabels> getLexicalCategoriesWithHttpInfo(String language) throws ApiException {
        okhttp3.Call localVarCall = getLexicalCategoriesValidateBeforeCall(language, null);
        Type localVarReturnType = new TypeToken<UtilityLabels>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getLexicalCategoriesAsync(String language, final ApiCallback<UtilityLabels> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLexicalCategoriesValidateBeforeCall(language, _callback);
        Type localVarReturnType = new TypeToken<UtilityLabels>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetLexicalCategoriesRequestBuilder {
        private final String language;

        private GetLexicalCategoriesRequestBuilder(String language) {
            this.language = language;
        }

        /**
         * Build call for getLexicalCategories
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Unknown language. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Error. An error occurred while processing the data. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getLexicalCategoriesCall(language, _callback);
        }


        /**
         * Execute getLexicalCategories request
         * @return UtilityLabels
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Unknown language. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Error. An error occurred while processing the data. </td><td>  -  </td></tr>
         </table>
         */
        public UtilityLabels execute() throws ApiException {
            ApiResponse<UtilityLabels> localVarResp = getLexicalCategoriesWithHttpInfo(language);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getLexicalCategories request with HTTP info returned
         * @return ApiResponse&lt;UtilityLabels&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Unknown language. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Error. An error occurred while processing the data. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UtilityLabels> executeWithHttpInfo() throws ApiException {
            return getLexicalCategoriesWithHttpInfo(language);
        }

        /**
         * Execute getLexicalCategories request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Unknown language. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Error. An error occurred while processing the data. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UtilityLabels> _callback) throws ApiException {
            return getLexicalCategoriesAsync(language, _callback);
        }
    }

    /**
     * Lists available lexical categories in a dataset
     * Returns a list of available [lexical categories](documentation/glossary?term&#x3D;lexicalcategory) for a given language dataset. 
     * @param language IANA language code (required)
     * @return GetLexicalCategoriesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unknown language. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error. An error occurred while processing the data. </td><td>  -  </td></tr>
     </table>
     */
    public GetLexicalCategoriesRequestBuilder getLexicalCategories(String language) throws IllegalArgumentException {
        if (language == null) throw new IllegalArgumentException("\"language\" is required but got null");
            

        return new GetLexicalCategoriesRequestBuilder(language);
    }
    private okhttp3.Call listAvailableDomainsCall(String sourceDomainsLanguage, String targetDomainsLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/domains/{source_domains_language}/{target_domains_language}"
            .replace("{" + "source_domains_language" + "}", localVarApiClient.escapeString(sourceDomainsLanguage.toString()))
            .replace("{" + "target_domains_language" + "}", localVarApiClient.escapeString(targetDomainsLanguage.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appId", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAvailableDomainsValidateBeforeCall(String sourceDomainsLanguage, String targetDomainsLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sourceDomainsLanguage' is set
        if (sourceDomainsLanguage == null) {
            throw new ApiException("Missing the required parameter 'sourceDomainsLanguage' when calling listAvailableDomains(Async)");
        }

        // verify the required parameter 'targetDomainsLanguage' is set
        if (targetDomainsLanguage == null) {
            throw new ApiException("Missing the required parameter 'targetDomainsLanguage' when calling listAvailableDomains(Async)");
        }

        return listAvailableDomainsCall(sourceDomainsLanguage, targetDomainsLanguage, _callback);

    }


    private ApiResponse<UtilityLabels> listAvailableDomainsWithHttpInfo(String sourceDomainsLanguage, String targetDomainsLanguage) throws ApiException {
        okhttp3.Call localVarCall = listAvailableDomainsValidateBeforeCall(sourceDomainsLanguage, targetDomainsLanguage, null);
        Type localVarReturnType = new TypeToken<UtilityLabels>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAvailableDomainsAsync(String sourceDomainsLanguage, String targetDomainsLanguage, final ApiCallback<UtilityLabels> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAvailableDomainsValidateBeforeCall(sourceDomainsLanguage, targetDomainsLanguage, _callback);
        Type localVarReturnType = new TypeToken<UtilityLabels>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAvailableDomainsRequestBuilder {
        private final String sourceDomainsLanguage;
        private final String targetDomainsLanguage;

        private ListAvailableDomainsRequestBuilder(String sourceDomainsLanguage, String targetDomainsLanguage) {
            this.sourceDomainsLanguage = sourceDomainsLanguage;
            this.targetDomainsLanguage = targetDomainsLanguage;
        }

        /**
         * Build call for listAvailableDomains
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> source_language and target_language are same. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Unknown source_language and/or target_language. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAvailableDomainsCall(sourceDomainsLanguage, targetDomainsLanguage, _callback);
        }


        /**
         * Execute listAvailableDomains request
         * @return UtilityLabels
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> source_language and target_language are same. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Unknown source_language and/or target_language. </td><td>  -  </td></tr>
         </table>
         */
        public UtilityLabels execute() throws ApiException {
            ApiResponse<UtilityLabels> localVarResp = listAvailableDomainsWithHttpInfo(sourceDomainsLanguage, targetDomainsLanguage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAvailableDomains request with HTTP info returned
         * @return ApiResponse&lt;UtilityLabels&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> source_language and target_language are same. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Unknown source_language and/or target_language. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UtilityLabels> executeWithHttpInfo() throws ApiException {
            return listAvailableDomainsWithHttpInfo(sourceDomainsLanguage, targetDomainsLanguage);
        }

        /**
         * Execute listAvailableDomains request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> source_language and target_language are same. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Unknown source_language and/or target_language. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UtilityLabels> _callback) throws ApiException {
            return listAvailableDomainsAsync(sourceDomainsLanguage, targetDomainsLanguage, _callback);
        }
    }

    /**
     * Lists available domains in a bilingual dataset
     * Returns a list of the available [domains](documentation/glossary?term&#x3D;domain) for a given bilingual language dataset. 
     * @param sourceDomainsLanguage IANA language code (required)
     * @param targetDomainsLanguage IANA language code (required)
     * @return ListAvailableDomainsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> source_language and target_language are same. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unknown source_language and/or target_language. </td><td>  -  </td></tr>
     </table>
     */
    public ListAvailableDomainsRequestBuilder listAvailableDomains(String sourceDomainsLanguage, String targetDomainsLanguage) throws IllegalArgumentException {
        if (sourceDomainsLanguage == null) throw new IllegalArgumentException("\"sourceDomainsLanguage\" is required but got null");
            

        if (targetDomainsLanguage == null) throw new IllegalArgumentException("\"targetDomainsLanguage\" is required but got null");
            

        return new ListAvailableDomainsRequestBuilder(sourceDomainsLanguage, targetDomainsLanguage);
    }
    private okhttp3.Call listAvailableFiltersCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/filters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appId", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAvailableFiltersValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listAvailableFiltersCall(_callback);

    }


    private ApiResponse<Filters> listAvailableFiltersWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listAvailableFiltersValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Filters>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAvailableFiltersAsync(final ApiCallback<Filters> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAvailableFiltersValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Filters>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAvailableFiltersRequestBuilder {

        private ListAvailableFiltersRequestBuilder() {
        }

        /**
         * Build call for listAvailableFilters
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Error. An error occurred while processing the data. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAvailableFiltersCall(_callback);
        }


        /**
         * Execute listAvailableFilters request
         * @return Filters
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Error. An error occurred while processing the data. </td><td>  -  </td></tr>
         </table>
         */
        public Filters execute() throws ApiException {
            ApiResponse<Filters> localVarResp = listAvailableFiltersWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAvailableFilters request with HTTP info returned
         * @return ApiResponse&lt;Filters&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Error. An error occurred while processing the data. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Filters> executeWithHttpInfo() throws ApiException {
            return listAvailableFiltersWithHttpInfo();
        }

        /**
         * Execute listAvailableFilters request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Error. An error occurred while processing the data. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Filters> _callback) throws ApiException {
            return listAvailableFiltersAsync(_callback);
        }
    }

    /**
     * Lists available filters
     * Returns a list of all the valid filters to construct API calls. 
     * @return ListAvailableFiltersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error. An error occurred while processing the data. </td><td>  -  </td></tr>
     </table>
     */
    public ListAvailableFiltersRequestBuilder listAvailableFilters() throws IllegalArgumentException {
        return new ListAvailableFiltersRequestBuilder();
    }
    private okhttp3.Call listAvailableLanguagesCall(String sourceLanguage, String targetLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/languages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sourceLanguage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sourceLanguage", sourceLanguage));
        }

        if (targetLanguage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("targetLanguage", targetLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appId", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAvailableLanguagesValidateBeforeCall(String sourceLanguage, String targetLanguage, final ApiCallback _callback) throws ApiException {
        return listAvailableLanguagesCall(sourceLanguage, targetLanguage, _callback);

    }


    private ApiResponse<Languages> listAvailableLanguagesWithHttpInfo(String sourceLanguage, String targetLanguage) throws ApiException {
        okhttp3.Call localVarCall = listAvailableLanguagesValidateBeforeCall(sourceLanguage, targetLanguage, null);
        Type localVarReturnType = new TypeToken<Languages>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAvailableLanguagesAsync(String sourceLanguage, String targetLanguage, final ApiCallback<Languages> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAvailableLanguagesValidateBeforeCall(sourceLanguage, targetLanguage, _callback);
        Type localVarReturnType = new TypeToken<Languages>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAvailableLanguagesRequestBuilder {
        private String sourceLanguage;
        private String targetLanguage;

        private ListAvailableLanguagesRequestBuilder() {
        }

        /**
         * Set sourceLanguage
         * @param sourceLanguage IANA language code. If provided output will be filtered by sourceLanguage. (optional)
         * @return ListAvailableLanguagesRequestBuilder
         */
        public ListAvailableLanguagesRequestBuilder sourceLanguage(String sourceLanguage) {
            this.sourceLanguage = sourceLanguage;
            return this;
        }
        
        /**
         * Set targetLanguage
         * @param targetLanguage IANA language code. If provided output will be filtered by sourceLanguage. (optional)
         * @return ListAvailableLanguagesRequestBuilder
         */
        public ListAvailableLanguagesRequestBuilder targetLanguage(String targetLanguage) {
            this.targetLanguage = targetLanguage;
            return this;
        }
        
        /**
         * Build call for listAvailableLanguages
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Unknown sourceLanguage and/or targetLanguage. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Error. An error occurred while processing the data. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAvailableLanguagesCall(sourceLanguage, targetLanguage, _callback);
        }


        /**
         * Execute listAvailableLanguages request
         * @return Languages
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Unknown sourceLanguage and/or targetLanguage. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Error. An error occurred while processing the data. </td><td>  -  </td></tr>
         </table>
         */
        public Languages execute() throws ApiException {
            ApiResponse<Languages> localVarResp = listAvailableLanguagesWithHttpInfo(sourceLanguage, targetLanguage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAvailableLanguages request with HTTP info returned
         * @return ApiResponse&lt;Languages&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Unknown sourceLanguage and/or targetLanguage. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Error. An error occurred while processing the data. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Languages> executeWithHttpInfo() throws ApiException {
            return listAvailableLanguagesWithHttpInfo(sourceLanguage, targetLanguage);
        }

        /**
         * Execute listAvailableLanguages request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Unknown sourceLanguage and/or targetLanguage. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Error. An error occurred while processing the data. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Languages> _callback) throws ApiException {
            return listAvailableLanguagesAsync(sourceLanguage, targetLanguage, _callback);
        }
    }

    /**
     * Lists available dictionaries
     * Returns a list of monolingual and bilingual language datasets available in the API 
     * @return ListAvailableLanguagesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unknown sourceLanguage and/or targetLanguage. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error. An error occurred while processing the data. </td><td>  -  </td></tr>
     </table>
     */
    public ListAvailableLanguagesRequestBuilder listAvailableLanguages() throws IllegalArgumentException {
        return new ListAvailableLanguagesRequestBuilder();
    }
    private okhttp3.Call listBilingualRegistersCall(String sourceRegisterLanguage, String targetRegisterLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/registers/{source_register_language}/{target_register_language}"
            .replace("{" + "source_register_language" + "}", localVarApiClient.escapeString(sourceRegisterLanguage.toString()))
            .replace("{" + "target_register_language" + "}", localVarApiClient.escapeString(targetRegisterLanguage.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appId", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listBilingualRegistersValidateBeforeCall(String sourceRegisterLanguage, String targetRegisterLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sourceRegisterLanguage' is set
        if (sourceRegisterLanguage == null) {
            throw new ApiException("Missing the required parameter 'sourceRegisterLanguage' when calling listBilingualRegisters(Async)");
        }

        // verify the required parameter 'targetRegisterLanguage' is set
        if (targetRegisterLanguage == null) {
            throw new ApiException("Missing the required parameter 'targetRegisterLanguage' when calling listBilingualRegisters(Async)");
        }

        return listBilingualRegistersCall(sourceRegisterLanguage, targetRegisterLanguage, _callback);

    }


    private ApiResponse<UtilityLabels> listBilingualRegistersWithHttpInfo(String sourceRegisterLanguage, String targetRegisterLanguage) throws ApiException {
        okhttp3.Call localVarCall = listBilingualRegistersValidateBeforeCall(sourceRegisterLanguage, targetRegisterLanguage, null);
        Type localVarReturnType = new TypeToken<UtilityLabels>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listBilingualRegistersAsync(String sourceRegisterLanguage, String targetRegisterLanguage, final ApiCallback<UtilityLabels> _callback) throws ApiException {

        okhttp3.Call localVarCall = listBilingualRegistersValidateBeforeCall(sourceRegisterLanguage, targetRegisterLanguage, _callback);
        Type localVarReturnType = new TypeToken<UtilityLabels>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListBilingualRegistersRequestBuilder {
        private final String sourceRegisterLanguage;
        private final String targetRegisterLanguage;

        private ListBilingualRegistersRequestBuilder(String sourceRegisterLanguage, String targetRegisterLanguage) {
            this.sourceRegisterLanguage = sourceRegisterLanguage;
            this.targetRegisterLanguage = targetRegisterLanguage;
        }

        /**
         * Build call for listBilingualRegisters
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> source_language and target_language are same. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Unknown source_language and/or target_language. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Error. An error occurred while processing the data. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listBilingualRegistersCall(sourceRegisterLanguage, targetRegisterLanguage, _callback);
        }


        /**
         * Execute listBilingualRegisters request
         * @return UtilityLabels
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> source_language and target_language are same. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Unknown source_language and/or target_language. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Error. An error occurred while processing the data. </td><td>  -  </td></tr>
         </table>
         */
        public UtilityLabels execute() throws ApiException {
            ApiResponse<UtilityLabels> localVarResp = listBilingualRegistersWithHttpInfo(sourceRegisterLanguage, targetRegisterLanguage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listBilingualRegisters request with HTTP info returned
         * @return ApiResponse&lt;UtilityLabels&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> source_language and target_language are same. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Unknown source_language and/or target_language. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Error. An error occurred while processing the data. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UtilityLabels> executeWithHttpInfo() throws ApiException {
            return listBilingualRegistersWithHttpInfo(sourceRegisterLanguage, targetRegisterLanguage);
        }

        /**
         * Execute listBilingualRegisters request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> source_language and target_language are same. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Unknown source_language and/or target_language. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Error. An error occurred while processing the data. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UtilityLabels> _callback) throws ApiException {
            return listBilingualRegistersAsync(sourceRegisterLanguage, targetRegisterLanguage, _callback);
        }
    }

    /**
     * Lists available registers in a bilingual dataset
     * Returns a list of the available [registers](documentation/glossary?term&#x3D;registers) for a given bilingual language dataset. 
     * @param sourceRegisterLanguage IANA language code (required)
     * @param targetRegisterLanguage IANA language code (required)
     * @return ListBilingualRegistersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> source_language and target_language are same. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unknown source_language and/or target_language. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error. An error occurred while processing the data. </td><td>  -  </td></tr>
     </table>
     */
    public ListBilingualRegistersRequestBuilder listBilingualRegisters(String sourceRegisterLanguage, String targetRegisterLanguage) throws IllegalArgumentException {
        if (sourceRegisterLanguage == null) throw new IllegalArgumentException("\"sourceRegisterLanguage\" is required but got null");
            

        if (targetRegisterLanguage == null) throw new IllegalArgumentException("\"targetRegisterLanguage\" is required but got null");
            

        return new ListBilingualRegistersRequestBuilder(sourceRegisterLanguage, targetRegisterLanguage);
    }
    private okhttp3.Call listEndpointFiltersCall(String endpoint, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/filters/{endpoint}"
            .replace("{" + "endpoint" + "}", localVarApiClient.escapeString(endpoint.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appId", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listEndpointFiltersValidateBeforeCall(String endpoint, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'endpoint' is set
        if (endpoint == null) {
            throw new ApiException("Missing the required parameter 'endpoint' when calling listEndpointFilters(Async)");
        }

        return listEndpointFiltersCall(endpoint, _callback);

    }


    private ApiResponse<Filters> listEndpointFiltersWithHttpInfo(String endpoint) throws ApiException {
        okhttp3.Call localVarCall = listEndpointFiltersValidateBeforeCall(endpoint, null);
        Type localVarReturnType = new TypeToken<Filters>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listEndpointFiltersAsync(String endpoint, final ApiCallback<Filters> _callback) throws ApiException {

        okhttp3.Call localVarCall = listEndpointFiltersValidateBeforeCall(endpoint, _callback);
        Type localVarReturnType = new TypeToken<Filters>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListEndpointFiltersRequestBuilder {
        private final String endpoint;

        private ListEndpointFiltersRequestBuilder(String endpoint) {
            this.endpoint = endpoint;
        }

        /**
         * Build call for listEndpointFilters
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Unknown endpoint. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Error. An error occurred while processing the data. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listEndpointFiltersCall(endpoint, _callback);
        }


        /**
         * Execute listEndpointFilters request
         * @return Filters
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Unknown endpoint. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Error. An error occurred while processing the data. </td><td>  -  </td></tr>
         </table>
         */
        public Filters execute() throws ApiException {
            ApiResponse<Filters> localVarResp = listEndpointFiltersWithHttpInfo(endpoint);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listEndpointFilters request with HTTP info returned
         * @return ApiResponse&lt;Filters&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Unknown endpoint. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Error. An error occurred while processing the data. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Filters> executeWithHttpInfo() throws ApiException {
            return listEndpointFiltersWithHttpInfo(endpoint);
        }

        /**
         * Execute listEndpointFilters request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Unknown endpoint. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Error. An error occurred while processing the data. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Filters> _callback) throws ApiException {
            return listEndpointFiltersAsync(endpoint, _callback);
        }
    }

    /**
     * Lists available filters for specific endpoint
     * Returns a list of all the valid filters for a given endpoint to construct API calls. 
     * @param endpoint Name of the endpoint. (required)
     * @return ListEndpointFiltersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unknown endpoint. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error. An error occurred while processing the data. </td><td>  -  </td></tr>
     </table>
     */
    public ListEndpointFiltersRequestBuilder listEndpointFilters(String endpoint) throws IllegalArgumentException {
        if (endpoint == null) throw new IllegalArgumentException("\"endpoint\" is required but got null");
            

        return new ListEndpointFiltersRequestBuilder(endpoint);
    }
    private okhttp3.Call listMonolingualDomainsCall(String sourceLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/domains/{source_language}"
            .replace("{" + "source_language" + "}", localVarApiClient.escapeString(sourceLanguage.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appId", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMonolingualDomainsValidateBeforeCall(String sourceLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sourceLanguage' is set
        if (sourceLanguage == null) {
            throw new ApiException("Missing the required parameter 'sourceLanguage' when calling listMonolingualDomains(Async)");
        }

        return listMonolingualDomainsCall(sourceLanguage, _callback);

    }


    private ApiResponse<UtilityLabels> listMonolingualDomainsWithHttpInfo(String sourceLanguage) throws ApiException {
        okhttp3.Call localVarCall = listMonolingualDomainsValidateBeforeCall(sourceLanguage, null);
        Type localVarReturnType = new TypeToken<UtilityLabels>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listMonolingualDomainsAsync(String sourceLanguage, final ApiCallback<UtilityLabels> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMonolingualDomainsValidateBeforeCall(sourceLanguage, _callback);
        Type localVarReturnType = new TypeToken<UtilityLabels>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListMonolingualDomainsRequestBuilder {
        private final String sourceLanguage;

        private ListMonolingualDomainsRequestBuilder(String sourceLanguage) {
            this.sourceLanguage = sourceLanguage;
        }

        /**
         * Build call for listMonolingualDomains
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Unknown source_language. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listMonolingualDomainsCall(sourceLanguage, _callback);
        }


        /**
         * Execute listMonolingualDomains request
         * @return UtilityLabels
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Unknown source_language. </td><td>  -  </td></tr>
         </table>
         */
        public UtilityLabels execute() throws ApiException {
            ApiResponse<UtilityLabels> localVarResp = listMonolingualDomainsWithHttpInfo(sourceLanguage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listMonolingualDomains request with HTTP info returned
         * @return ApiResponse&lt;UtilityLabels&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Unknown source_language. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UtilityLabels> executeWithHttpInfo() throws ApiException {
            return listMonolingualDomainsWithHttpInfo(sourceLanguage);
        }

        /**
         * Execute listMonolingualDomains request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Unknown source_language. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UtilityLabels> _callback) throws ApiException {
            return listMonolingualDomainsAsync(sourceLanguage, _callback);
        }
    }

    /**
     * Lists available domains in a monolingual dataset
     * Returns a list of the available [domains](documentation/glossary?term&#x3D;domain) for a given monolingual language dataset. 
     * @param sourceLanguage IANA language code (required)
     * @return ListMonolingualDomainsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unknown source_language. </td><td>  -  </td></tr>
     </table>
     */
    public ListMonolingualDomainsRequestBuilder listMonolingualDomains(String sourceLanguage) throws IllegalArgumentException {
        if (sourceLanguage == null) throw new IllegalArgumentException("\"sourceLanguage\" is required but got null");
            

        return new ListMonolingualDomainsRequestBuilder(sourceLanguage);
    }
    private okhttp3.Call listMonolingualRegionsCall(String sourceLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/regions/{source_language}"
            .replace("{" + "source_language" + "}", localVarApiClient.escapeString(sourceLanguage.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appId", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMonolingualRegionsValidateBeforeCall(String sourceLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sourceLanguage' is set
        if (sourceLanguage == null) {
            throw new ApiException("Missing the required parameter 'sourceLanguage' when calling listMonolingualRegions(Async)");
        }

        return listMonolingualRegionsCall(sourceLanguage, _callback);

    }


    private ApiResponse<Regions> listMonolingualRegionsWithHttpInfo(String sourceLanguage) throws ApiException {
        okhttp3.Call localVarCall = listMonolingualRegionsValidateBeforeCall(sourceLanguage, null);
        Type localVarReturnType = new TypeToken<Regions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listMonolingualRegionsAsync(String sourceLanguage, final ApiCallback<Regions> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMonolingualRegionsValidateBeforeCall(sourceLanguage, _callback);
        Type localVarReturnType = new TypeToken<Regions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListMonolingualRegionsRequestBuilder {
        private final String sourceLanguage;

        private ListMonolingualRegionsRequestBuilder(String sourceLanguage) {
            this.sourceLanguage = sourceLanguage;
        }

        /**
         * Build call for listMonolingualRegions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Unknown source_language. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listMonolingualRegionsCall(sourceLanguage, _callback);
        }


        /**
         * Execute listMonolingualRegions request
         * @return Regions
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Unknown source_language. </td><td>  -  </td></tr>
         </table>
         */
        public Regions execute() throws ApiException {
            ApiResponse<Regions> localVarResp = listMonolingualRegionsWithHttpInfo(sourceLanguage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listMonolingualRegions request with HTTP info returned
         * @return ApiResponse&lt;Regions&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Unknown source_language. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Regions> executeWithHttpInfo() throws ApiException {
            return listMonolingualRegionsWithHttpInfo(sourceLanguage);
        }

        /**
         * Execute listMonolingualRegions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Unknown source_language. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Regions> _callback) throws ApiException {
            return listMonolingualRegionsAsync(sourceLanguage, _callback);
        }
    }

    /**
     * Lists available regions in a monolingual dataset
     * Returns a list of the available [regions](documentation/glossary?term&#x3D;regions) for a given monolingual language dataset. 
     * @param sourceLanguage IANA language code (required)
     * @return ListMonolingualRegionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unknown source_language. </td><td>  -  </td></tr>
     </table>
     */
    public ListMonolingualRegionsRequestBuilder listMonolingualRegions(String sourceLanguage) throws IllegalArgumentException {
        if (sourceLanguage == null) throw new IllegalArgumentException("\"sourceLanguage\" is required but got null");
            

        return new ListMonolingualRegionsRequestBuilder(sourceLanguage);
    }
    private okhttp3.Call listMonolingualRegistersCall(String sourceLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/registers/{source_language}"
            .replace("{" + "source_language" + "}", localVarApiClient.escapeString(sourceLanguage.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appId", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMonolingualRegistersValidateBeforeCall(String sourceLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sourceLanguage' is set
        if (sourceLanguage == null) {
            throw new ApiException("Missing the required parameter 'sourceLanguage' when calling listMonolingualRegisters(Async)");
        }

        return listMonolingualRegistersCall(sourceLanguage, _callback);

    }


    private ApiResponse<UtilityLabels> listMonolingualRegistersWithHttpInfo(String sourceLanguage) throws ApiException {
        okhttp3.Call localVarCall = listMonolingualRegistersValidateBeforeCall(sourceLanguage, null);
        Type localVarReturnType = new TypeToken<UtilityLabels>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listMonolingualRegistersAsync(String sourceLanguage, final ApiCallback<UtilityLabels> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMonolingualRegistersValidateBeforeCall(sourceLanguage, _callback);
        Type localVarReturnType = new TypeToken<UtilityLabels>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListMonolingualRegistersRequestBuilder {
        private final String sourceLanguage;

        private ListMonolingualRegistersRequestBuilder(String sourceLanguage) {
            this.sourceLanguage = sourceLanguage;
        }

        /**
         * Build call for listMonolingualRegisters
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Unknown source_language. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Error. An error occurred while processing the data. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listMonolingualRegistersCall(sourceLanguage, _callback);
        }


        /**
         * Execute listMonolingualRegisters request
         * @return UtilityLabels
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Unknown source_language. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Error. An error occurred while processing the data. </td><td>  -  </td></tr>
         </table>
         */
        public UtilityLabels execute() throws ApiException {
            ApiResponse<UtilityLabels> localVarResp = listMonolingualRegistersWithHttpInfo(sourceLanguage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listMonolingualRegisters request with HTTP info returned
         * @return ApiResponse&lt;UtilityLabels&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Unknown source_language. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Error. An error occurred while processing the data. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UtilityLabels> executeWithHttpInfo() throws ApiException {
            return listMonolingualRegistersWithHttpInfo(sourceLanguage);
        }

        /**
         * Execute listMonolingualRegisters request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Unknown source_language. </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Error. An error occurred while processing the data. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UtilityLabels> _callback) throws ApiException {
            return listMonolingualRegistersAsync(sourceLanguage, _callback);
        }
    }

    /**
     * Lists available registers in a  monolingual dataset
     * Returns a list of the available [registers](documentation/glossary?term&#x3D;registers) for a given monolingual language dataset. 
     * @param sourceLanguage IANA language code (required)
     * @return ListMonolingualRegistersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unknown source_language. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Error. An error occurred while processing the data. </td><td>  -  </td></tr>
     </table>
     */
    public ListMonolingualRegistersRequestBuilder listMonolingualRegisters(String sourceLanguage) throws IllegalArgumentException {
        if (sourceLanguage == null) throw new IllegalArgumentException("\"sourceLanguage\" is required but got null");
            

        return new ListMonolingualRegistersRequestBuilder(sourceLanguage);
    }
}
